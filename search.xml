<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[SQL]]></title>
      <url>/2020/02/20/202002200630/</url>
      <content type="html"><![CDATA[<p>SQL 是访问和处理关系数据库的计算机标准语言。</p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。至于数据本身如何存储到文件，那是数据库软件的事情，应用程序自己并不关心：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌──────────────┐</span><br><span class="line">│ application  │</span><br><span class="line">└──────────────┘</span><br><span class="line">       ▲│</span><br><span class="line">       ││</span><br><span class="line">   read││write</span><br><span class="line">       ││</span><br><span class="line">       │▼</span><br><span class="line">┌──────────────┐</span><br><span class="line">│   database   │</span><br><span class="line">└──────────────┘</span><br></pre></td></tr></table></figure>

<p>这样一来，编写应用程序的时候，数据读写的功能就被大大地简化了。</p>
<h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><p>数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：层次模型、网状模型和关系模型。</p>
<h4 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h4><p>层次模型就是以“上下级”的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">            ┌─────┐</span><br><span class="line">            │     │</span><br><span class="line">            └─────┘</span><br><span class="line">               │</span><br><span class="line">       ┌───────┴───────┐</span><br><span class="line">       │               │</span><br><span class="line">    ┌─────┐         ┌─────┐</span><br><span class="line">    │     │         │     │</span><br><span class="line">    └─────┘         └─────┘</span><br><span class="line">       │               │</span><br><span class="line">   ┌───┴───┐       ┌───┴───┐</span><br><span class="line">   │       │       │       │</span><br><span class="line">┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐</span><br><span class="line">│     │ │     │ │     │ │     │</span><br><span class="line">└─────┘ └─────┘ └─────┘ └─────┘</span><br></pre></td></tr></table></figure>

<h4 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h4><p>网状模型把每个数据节点和其它很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     ┌─────┐      ┌─────┐</span><br><span class="line">   ┌─│     │──────│     │──┐</span><br><span class="line">   │ └─────┘      └─────┘  │</span><br><span class="line">   │    │            │     │</span><br><span class="line">   │    └──────┬─────┘     │</span><br><span class="line">   │           │           │</span><br><span class="line">┌─────┐     ┌─────┐     ┌─────┐</span><br><span class="line">│     │─────│     │─────│     │</span><br><span class="line">└─────┘     └─────┘     └─────┘</span><br><span class="line">   │           │           │</span><br><span class="line">   │     ┌─────┴─────┐     │</span><br><span class="line">   │     │           │     │</span><br><span class="line">   │  ┌─────┐     ┌─────┐  │</span><br><span class="line">   └──│     │─────│     │──┘</span><br><span class="line">      └─────┘     └─────┘</span><br></pre></td></tr></table></figure>

<h4 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h4><p>关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个 Excel 表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌─────┬─────┬─────┬─────┬─────┐</span><br><span class="line">│     │     │     │     │     │</span><br><span class="line">├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">│     │     │     │     │     │</span><br><span class="line">├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">│     │     │     │     │     │</span><br><span class="line">├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">│     │     │     │     │     │</span><br><span class="line">└─────┴─────┴─────┴─────┴─────┘</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>关系数据库支持的标准数据类型包括数值、字符串、时间等：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th align="center">类型</th>
<th align="right">说明</th>
</tr>
</thead>
<tbody><tr>
<td>INT</td>
<td align="center">整型</td>
<td align="right">4 字节整数类型，范围约+/-21 亿</td>
</tr>
<tr>
<td>BIGINT</td>
<td align="center">长整型</td>
<td align="right">8 字节整数类型，范围约+/-922 亿亿</td>
</tr>
<tr>
<td>REAL/FLOAT(24)</td>
<td align="center">浮点型</td>
<td align="right">4 字节浮点数，范围约+/-1038</td>
</tr>
<tr>
<td>DOUBLE</td>
<td align="center">浮点型</td>
<td align="right">8 字节浮点数，范围约+/-10308</td>
</tr>
<tr>
<td>DECIMAL(M,N)</td>
<td align="center">高精度小数</td>
<td align="right">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共 20 位，其中小数 10 位，通常用于财务计算</td>
</tr>
<tr>
<td>CHAR(N)</td>
<td align="center">定长字符串</td>
<td align="right">存储指定长度的字符串，例如，CHAR(100)总是存储 100 个字符的字符串</td>
</tr>
<tr>
<td>VARCHAR(N)</td>
<td align="center">变长字符串</td>
<td align="right">存储可变长度的字符串，例如，VARCHAR(100)可以存储 0~100 个字符的字符串</td>
</tr>
<tr>
<td>BOOLEAN</td>
<td align="center">布尔类型</td>
<td align="right">存储 True 或者 False</td>
</tr>
<tr>
<td>DATE</td>
<td align="center">日期类型</td>
<td align="right">存储日期，例如，2016-06-22</td>
</tr>
<tr>
<td>TIME</td>
<td align="center">时间类型</td>
<td align="right">存储时间，例如，12:20:59</td>
</tr>
<tr>
<td>DATETIME</td>
<td align="center">日期和时间类型</td>
<td align="right">存储日期+时间，例如，2018-06-22 12:20:59</td>
</tr>
</tbody></table>
<p>选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，BIGINT 能满足整数存储的需求，VARCHAR(N)能满足字符串存储的需求，这两种类型是使用最广泛的。</p>
<h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>SQL 是结构化查询语言的缩写，用来访问和操作数据库系统。SQL 语句既可以查询数据库中的数据，也可以添加、更新和删除数据库中的数据，还可以对数据库进行管理和维护操作。</p>
<p>SQL 语言关键字不区分大小写。但是，针对不同的数据库，对于表名和列名，有的数据库区分大小写，有的数据库不区分大小写。同一个数据库，有的在 Linux 上区分大小写，有的在 Windows 上不区分大小写。</p>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><p>MySQL 是目前应用最广泛的开源关系数据库。要在 Windows 或 Mac 上安装 MySQL，首先从 MySQL 官方网站下载最新的 MySQL Community Server 版本：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p>
<p>MySQL 在安装过程中会自动创建一个<code>root</code>用户，并提示输入<code>root</code>口令。要在 Linux 上安装 MySQL，可以使用发行版的包管理器。例如，Debian 和 Ubuntu 用户可以简单地通过命令<code>apt-get install mysql-server</code>安装最新的 MySQL 版本。</p>
<p>MySQL 安装后会自动在后台运行。为了验证 MySQL 安装是否正确，需要通过<code>mysql</code>这个命令行程序来连接 MySQL 服务器。在命令提示符下输入<code>mysql -u root -p</code>，然后输入口令，如果一切正确，就会连接到 MySQL 服务器，同时提示符变为<code>mysql&gt;</code>。假设远程 MySQL Server 的 IP 地址是 10.0.1.99，那么就使用-h 指定 IP 或域名：<code>mysql -h 10.0.1.99 -u root -p</code>。输入<code>exit</code>退出 MySQL 命令行。注意，MySQL 服务器仍在后台运行。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有数据库</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新数据库</span></span><br><span class="line">CREATE DATABASE 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个数据库</span></span><br><span class="line">DROP DATABASE 数据库名称;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将一个数据库切换为当前数据库</span></span><br><span class="line">USE 数据库名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出当前数据库的所有表</span></span><br><span class="line">SHOW TABLES;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个表的结构</span></span><br><span class="line">DESC 表名称;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建表</span></span><br><span class="line">CREATE TABLE 表名称;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除表</span></span><br><span class="line">DROP TABLE 表名称;</span><br></pre></td></tr></table></figure>

<p>修改表就比较复杂。</p>
<p>要给<code>students</code>表新增一列<code>birth</code>，使用：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> birth <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>要修改<code>birth</code>列，例如把列名改为<code>birthday</code>，类型改为 VARCHAR(20)：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> birth birthday <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>要删除列，使用：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday;</span><br></pre></td></tr></table></figure>

<h2 id="关系模型-1"><a href="#关系模型-1" class="headerlink" title="关系模型"></a>关系模型</h2><p>关系数据库是建立在关系模型上的。而关系模型本质上就是若干个存储数据的二维表，可以把它们看作很多 Excel 表。表的每一行称为记录（Record），记录是一个逻辑意义上的数据。表的每一列称为字段（Column），同一个表的每一行记录都拥有相同的若干字段。</p>
<p>字段定义了数据类型（整型、浮点型、字符串、日期等），以及是否允许为<code>NULL</code>。注意<code>NULL</code>表示字段数据不存在。一个整型字段如果为<code>NULL</code>不表示它的值为<code>0</code>，同样的，一个字符串型字段为<code>NULL</code>也不表示它的值为空串<code>&#39;&#39;</code>。通常情况下，字段应该避免允许为<code>NULL</code>。不允许为<code>NULL</code>可以简化查询条件，加快查询速度，也利于应用程序读取数据后无需判断是否为<code>NULL</code>。</p>
<p>和 Excel 表有所不同的是，关系数据库的表和表之间需要建立“<code>一对多</code>”，“<code>多对一</code>”和“<code>一对一</code>”的关系，这样才能够按照应用程序的逻辑来组织和存储数据。</p>
<p>在关系数据库中，关系是通过<code>主键</code>和<code>外键</code>来维护的。</p>
<h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>在关系数据库中，一张表中的每一行数据被称为一条记录。一条记录就是由多个字段组成的。每一条记录都包含若干定义好的字段。同一个表的所有记录都有相同的字段定义。</p>
<p>对于关系表，有个很重要的约束，就是任意两条记录不能重复。不能重复不是指两条记录不完全相同，而是指能够通过某个字段唯一区分出不同的记录，这个字段被称为<code>主键</code>。</p>
<p>对主键的要求，最关键的一点是：记录一旦插入到表中，主键最好不要再修改，因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响。</p>
<p>由于主键的作用十分重要，如何选取主键会对业务开发产生重要影响。所以，选取主键的一个基本原则是：不使用任何业务相关的字段作为主键。</p>
<h4 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h4><p>关系数据库实际上还允许通过多个字段唯一标识记录，即两个或更多的字段都设置为主键，这种主键被称为联合主键。对于联合主键，允许一列有重复，只要不是所有主键列都重复即可。没有必要的情况下，尽量不使用联合主键，因为它给关系表带来了复杂度的上升。</p>
<h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><p>外键并不是通过列名实现的，而是通过定义外键约束实现的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (class_id) <span class="keyword">REFERENCES</span> classes (<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>

<p>其中，外键约束的名称<code>fk_class_id</code>可以任意，<code>FOREIGN KEY (class_id)</code>指定了<code>class_id</code>作为外键，<code>REFERENCES classes (id)</code>指定了这个外键将关联到<code>classes</code>表的<code>id</code>列（即 classes 表的主键）。</p>
<p>通过定义外键约束，关系数据库可以保证无法插入无效的数据。由于外键约束会降低数据库的性能，大部分互联网应用程序为了追求速度，并不设置外键约束，而是仅靠<code>应用程序</code>自身来保证逻辑的正确性。这种情况下，<code>class_id</code>仅仅是一个普通的列，只是它起到了外键的作用而已。</p>
<p>要删除一个外键约束，也是通过 ALTER TABLE 实现的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_class_id;</span><br></pre></td></tr></table></figure>

<p>注意：删除外键约束并没有删除外键这一列。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>在关系数据库中，如果有上万甚至上亿条记录，在查找记录的时候，想要获得非常快的速度，就需要使用索引。索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);</span><br></pre></td></tr></table></figure>

<p>使用<code>ADD INDEX idx_score (score)</code>就创建了一个名称为<code>idx_score</code>，使用列<code>score</code>的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_name_score (<span class="keyword">name</span>, score);</span><br></pre></td></tr></table></figure>

<p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如 gender 列，大约一半的记录值是 M，另一半是 F，因此，对该列创建索引就没有意义。</p>
<p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p>
<p>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</p>
<h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> uni_name (<span class="keyword">name</span>);</span><br></pre></td></tr></table></figure>

<p>通过 UNIQUE 关键字就添加了一个唯一索引。</p>
<h4 id="强制使用指定索引"><a href="#强制使用指定索引" class="headerlink" title="强制使用指定索引"></a>强制使用指定索引</h4><p>在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。可以使用 FORCE INDEX 强制查询使用指定的索引。例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">FORCE</span> <span class="keyword">INDEX</span> (idx_class_id) <span class="keyword">WHERE</span> class_id = <span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">id</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>指定索引的前提是索引<code>idx_class_id</code>必须存在。</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><p>在关系数据库中，最常用的操作就是查询。</p>
<p>通过<code>mysql -u root -p &lt; init-data.sql</code>命令导入初始化数据。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果test数据库不存在，就创建test数据库：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 切换到test数据库</span></span><br><span class="line"><span class="keyword">USE</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除classes表和students表（如果存在）：</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> classes;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建classes表：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> classes (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建students表：</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    gender <span class="built_in">VARCHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    score <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入classes记录：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'一班'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'二班'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'三班'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> classes(<span class="keyword">id</span>, <span class="keyword">name</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'四班'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入students记录：</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'M'</span>, <span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">1</span>, <span class="string">'小红'</span>, <span class="string">'F'</span>, <span class="number">95</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">1</span>, <span class="string">'小军'</span>, <span class="string">'M'</span>, <span class="number">88</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">1</span>, <span class="string">'小米'</span>, <span class="string">'F'</span>, <span class="number">73</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">2</span>, <span class="string">'小白'</span>, <span class="string">'F'</span>, <span class="number">81</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">2</span>, <span class="string">'小兵'</span>, <span class="string">'M'</span>, <span class="number">55</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">2</span>, <span class="string">'小林'</span>, <span class="string">'M'</span>, <span class="number">85</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">3</span>, <span class="string">'小新'</span>, <span class="string">'F'</span>, <span class="number">91</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">3</span>, <span class="string">'小王'</span>, <span class="string">'M'</span>, <span class="number">89</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="number">3</span>, <span class="string">'小丽'</span>, <span class="string">'F'</span>, <span class="number">85</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- OK:</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'ok'</span> <span class="keyword">as</span> <span class="string">'result:'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>查询一个表的所有行和所有列的数据。</p>
<h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>SELECT 语句可以通过<code>WHERE</code>条件来设定查询条件，查询结果是满足查询条件的记录。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> &lt;条件表达式&gt;;</span><br></pre></td></tr></table></figure>

<p>SELECT 语句可以通过<code>WHERE</code>条件来设定查询条件，查询结果是满足查询条件的记录。第一种条件表达式可以用<code>&lt;条件1&gt; AND &lt;条件2&gt;</code>表达满足条件 1 并且满足条件 2。第二种条件是<code>&lt;条件1&gt; OR &lt;条件2&gt;</code>，表示满足条件 1 或者满足条件 2。第三种条件是<code>NOT &lt;条件&gt;</code>，表示“不符合该条件”的记录。<code>NOT</code>条件<code>&lt;&gt;</code>，因此，<code>NOT</code>查询不是很常用。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">OR</span> gender = <span class="string">'M'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">NOT</span> class_id = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id &lt;&gt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (score &lt; <span class="number">80</span> <span class="keyword">OR</span> score &gt; <span class="number">90</span>) <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><p>使用<code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code>可以选出表中的若干条记录。返回的二维表结构和原表是相同的，即结果集的所有列与原表的所有列都一一对应。如果只希望返回某些列的数据，而不是所有列的数据，可以用<code>SELECT 列1, 列2, 列3 FROM ...</code>，让结果集仅包含指定列。这种操作称为投影查询。</p>
<p>这样返回的结果集就只包含了指定的列，并且，结果集的列的顺序和原表可以不一样。</p>
<p>使用<code>SELECT 列1, 列2, 列3 FROM ...</code>时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。它的语法是<code>SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...</code>。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用 SELECT 查询时，查询结果集通常是按照<code>id</code>排序的，也就是根据主键排序。可以加上<code>ORDER BY</code>子句，选择排序方式。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ASC 表示“升序”</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> &lt;条件表达式&gt; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;属性名&gt; <span class="keyword">ASC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- DESC 表示“倒序”</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> &lt;条件表达式&gt; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;属性名&gt; <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>要进一步排序，可以继续添加列名。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- DESC 表示“倒序”</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> &lt;条件表达式&gt; <span class="keyword">ORDER</span> <span class="keyword">BY</span> &lt;属性名<span class="number">1</span>&gt; <span class="keyword">DESC</span>, &lt;属性名<span class="number">2</span>&gt; <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<p>表示先按<code>属性名1</code>列倒序，如果有相同的，再按<code>属性名2</code>列排序：</p>
<p><code>ORDER BY</code>子句要放到<code>WHERE</code>子句后面</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, gender <span class="keyword">ASC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id = <span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>分页实际上就是从结果集中“截取”出第 M~N 条记录。这个查询可以通过<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>子句实现。对结果集从<code>N</code>号记录开始，最多取<code>M</code>条。</p>
<p>分页查询的关键在于，首先要确定每页需要显示的结果数量<code>pageSize</code>，然后根据当前页的索引<code>pageIndex</code>（从 0 开始），确定<code>LIMIT</code>和<code>OFFSET</code>应该设定的值：</p>
<ul>
<li><code>LIMIT</code>总是设定为<code>pageSize</code></li>
<li><code>OFFSET</code>计算公式为<code>pageSize \* pageIndex</code></li>
</ul>
<p><code>OFFSET</code>超过了查询的最大数量并不会报错，而是得到一个空的结果集。</p>
<p>在 MySQL 中，<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>还可以简写成<code>LIMIT &lt;M&gt;, &lt;N&gt;</code>。</p>
<p>使用<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code>分页时，随着<code>N</code>越来越大，查询效率也会越来越低。</p>
<h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><p>对于统计总数、平均数这类计算，SQL 提供了专门的聚合函数，使用聚合函数进行查询，就是聚合查询，它可以快速获得结果。</p>
<p>使用 SQL 内置的<code>COUNT()</code>函数查询记录数量。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure>

<p><code>COUNT(*)</code>表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是<code>COUNT(*)</code>。</p>
<p>通常，使用聚合查询时，应该给列名设置一个别名，便于处理结果：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 别名 <span class="keyword">FROM</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure>

<p>除了<code>COUNT()</code>函数外，SQL 还提供了如下聚合函数：</p>
<table>
<thead>
<tr>
<th>函数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>SUM</td>
<td align="center">计算某一列的合计值，该列必须为数值类型</td>
</tr>
<tr>
<td>AVG</td>
<td align="center">计算某一列的平均值，该列必须为数值类型</td>
</tr>
<tr>
<td>MAX</td>
<td align="center">计算某一列的最大值</td>
</tr>
<tr>
<td>MIN</td>
<td align="center">计算某一列的最小值</td>
</tr>
</tbody></table>
<p>要特别注意：如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，COUNT()会返回<code>0</code>，而 SUM()、AVG()、MAX()和 MIN()会返回<code>NULL</code>：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) boys <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) average <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure>

<h4 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h4><p>对于聚合查询，SQL 还提供了“分组聚合”的功能。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按属性名分组</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 别名 <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">GROUP</span> <span class="keyword">BY</span> &lt;属性名&gt;;</span><br></pre></td></tr></table></figure>

<p>执行该 SELECT 语句时，会把<code>属性名对应取值</code>相同的列先分组，再分别计算，因此，得到了<code>多行</code>结果。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br><span class="line"><span class="keyword">SELECT</span> class_id, <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计各班的男生和女生人数</span></span><br><span class="line"><span class="keyword">SELECT</span> class_id, gender, <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id, gender;</span><br></pre></td></tr></table></figure>

<h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>SELECT 查询不但可以从一张表查询数据，还可以从多张表同时查询数据。查询多张表的语法是：<code>SELECT * FROM &lt;表1&gt;, &lt;表2&gt;</code>。</p>
<p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是<code>表1</code>和<code>表2</code>表的“乘积”，即<code>表1</code>的每一行与<code>表2</code>的每一行都两两拼在一起返回。结果集的列数是两表的列数之和，行数是两表的行数之积。</p>
<p>这种多表查询又称笛卡尔查询，使用笛卡尔查询时要非常小心，由于结果集是目标表的行数乘积，对两个各自有 100 行记录的表进行笛卡尔查询将返回 1 万条记录，对两个各自有 1 万行记录的表进行笛卡尔查询将返回 1 亿条记录。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    表<span class="number">1.</span>属性<span class="number">1</span> 别名<span class="number">1</span>,</span><br><span class="line">    表<span class="number">1.</span>属性<span class="number">2</span>,</span><br><span class="line">    表<span class="number">1.</span>属性<span class="number">3</span>,</span><br><span class="line">    表<span class="number">1.</span>属性<span class="number">4</span>,</span><br><span class="line">    表<span class="number">2.</span>属性<span class="number">1</span> 别名<span class="number">2</span>,</span><br><span class="line">    表<span class="number">2.</span>属性<span class="number">2</span> 别名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span>, 表<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>注意，多表查询时，要使用<code>表名.列名</code>这样的方式来<code>引用列</code>和<code>设置别名</code>，这样就避免了结果集的列名重复问题。但是，用<code>表名.列名</code>这种方式列举两个表的所有列实在是很麻烦，所以 SQL 还允许<code>给表设置一个别名</code>，让投影查询中引用起来稍微简洁一点：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">1</span> 别名<span class="number">1</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">2</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">3</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">4</span>,</span><br><span class="line">    表别名<span class="number">2.</span>属性<span class="number">1</span> 别名<span class="number">2</span>,</span><br><span class="line">    表别名<span class="number">2.</span>属性<span class="number">2</span> 别名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 表别名<span class="number">1</span>, 表<span class="number">2</span> 表别名<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>注意到 FROM 子句给表设置别名的语法是<code>FROM &lt;表名1&gt; &lt;别名1&gt;, &lt;表名2&gt; &lt;别名2&gt;</code>。</p>
<p>多表查询也是可以添加 WHERE 条件的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">1</span> 别名<span class="number">1</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">2</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">3</span>,</span><br><span class="line">    表别名<span class="number">1.</span>属性<span class="number">4</span>,</span><br><span class="line">    表别名<span class="number">2.</span>属性<span class="number">1</span> 别名<span class="number">2</span>,</span><br><span class="line">    表别名<span class="number">2.</span>属性<span class="number">2</span> 别名<span class="number">3</span></span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 表别名<span class="number">1</span>, 表<span class="number">2</span> 表别名<span class="number">2</span>;</span><br><span class="line">WHERE 表别名1.属性1 = 'M' AND 表别名2.属性1 = 1;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure>

<p>这种一次查询两个表的数据，查询的结果也是一个二维表，它是<code>students</code>表和<code>classes</code>表的“乘积”，即<code>students</code>表的每一行与<code>classes</code>表的每一行都两两拼在一起返回。结果集的列数是<code>students</code>表和<code>classes</code>表的列数之和，行数是<code>students</code>表和<code>classes</code>表的行数之积。</p>
<p>上述查询的结果集有两列<code>id</code>和两列<code>name</code>，两列<code>id</code>是因为其中一列是<code>students</code>表的<code>id</code>，而另一列是<code>classes</code>表的<code>id</code>，但是在结果集中，不好区分。两列<code>name</code>同理。</p>
<p>要解决这个问题，仍然可以利用投影查询的“设置列的别名”来给两个表各自的<code>id</code>和<code>name</code>列起别名：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    students.id <span class="keyword">sid</span>,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line"><span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure>

<p>还可以使用别名：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c</span><br><span class="line"><span class="keyword">WHERE</span> s.gender = <span class="string">'M'</span> <span class="keyword">AND</span> c.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>连接查询是另一种类型的多表查询。连接查询对多个表进行 JOIN 运算，简单地说，就是先确定一个主表作为结果集，然后，把其它表的行有选择性地“连接”在主表结果集上。</p>
<p>例如，想要选出<code>students</code>表的所有学生信息，可以用一条简单的 SELECT 语句完成：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, s.gender, s.score <span class="keyword">FROM</span> students s;</span><br></pre></td></tr></table></figure>

<p>但是，假设希望结果集同时包含所在班级的名称，上面的结果集只有<code>class_id</code>列，缺少对应班级的<code>name</code>列。</p>
<p>现在问题来了，存放班级名称的<code>name</code>列存储在<code>classes</code>表中，只有根据<code>students</code>表的<code>class_id</code>，找到<code>classes</code>表对应的行，再取出<code>name</code>列，就可以获得班级名称。</p>
<p>这时，连接查询就派上了用场。先使用最常用的一种内连接<code>INNER JOIN</code>来实现：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></table></figure>

<p>注意 INNER JOIN 查询的写法是：</p>
<ul>
<li>先确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li>
<li>再确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li>
<li>然后确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li>
<li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li>
</ul>
<h4 id="内连接（INNER-JOIN）"><a href="#内连接（INNER-JOIN）" class="headerlink" title="内连接（INNER JOIN）"></a>内连接（INNER JOIN）</h4><p>使用<code>INNER JOIN</code>只返回同时存在于两张表的行数据。<code>INNER JOIN</code>是最常用的一种 JOIN 查询，它的语法是<code>SELECT ... FROM &lt;表1&gt; INNER JOIN &lt;表2&gt; ON &lt;条件...&gt;；</code>。</p>
<figure class="image-box">
                <img src="insert.png" alt="" title="" class="">
                <p></p>
            </figure>

<h4 id="左外连接（LEFT-OUTER-JOIN）"><a href="#左外连接（LEFT-OUTER-JOIN）" class="headerlink" title="左外连接（LEFT OUTER JOIN）"></a>左外连接（LEFT OUTER JOIN）</h4><p>使用<code>LEFT OUTER JOIN</code>返回左表都存在的行。如果某一行仅在左表存在，那么结果集就会以 NULL 填充剩下的字段。</p>
<figure class="image-box">
                <img src="left.png" alt="" title="" class="">
                <p></p>
            </figure>

<h4 id="右外连接（RIGHT-OUTER-JOIN）"><a href="#右外连接（RIGHT-OUTER-JOIN）" class="headerlink" title="右外连接（RIGHT OUTER JOIN）"></a>右外连接（RIGHT OUTER JOIN）</h4><p>使用<code>RIGHT OUTER JOIN</code>返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以 NULL 填充剩下的字段。</p>
<figure class="image-box">
                <img src="right.png" alt="" title="" class="">
                <p></p>
            </figure>

<h4 id="全外连接（FULL-OUTER-JOIN）"><a href="#全外连接（FULL-OUTER-JOIN）" class="headerlink" title="全外连接（FULL OUTER JOIN）"></a>全外连接（FULL OUTER JOIN）</h4><p>使用<code>FULL OUTER JOIN</code>，会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为 NULL。</p>
<figure class="image-box">
                <img src="full.png" alt="" title="" class="">
                <p></p>
            </figure>

<h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><p>关系数据库的基本操作就是增删改查，即 CRUD：Create、Retrieve、Update、Delete。而对于增、删、改，对应的 SQL 语句分别是：</p>
<ul>
<li>INSERT：插入新记录；</li>
<li>UPDATE：更新已有记录；</li>
<li>DELETE：删除已有记录。</li>
</ul>
<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><p>当需要向数据库表中插入一条新记录时，就必须使用<code>INSERT</code>语句。该语句的基本语法是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &lt;表名&gt; (字段<span class="number">1</span>, 字段<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>

<p>例如，向<code>students</code>表插入一条新记录，先列举出需要插入的字段名称，然后在<code>VALUES</code>子句中依次写出对应字段的值：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'你猜'</span>, <span class="string">'M'</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure>

<p>如果一个字段有默认值，那么在<code>INSERT</code>语句中也可以不出现。要注意，字段顺序不必和数据库表的字段顺序一致，但值的顺序必须和字段顺序一致。</p>
<p>还可以一次性添加多条记录，只需要在<code>VALUES</code>子句中指定多个记录值，每个记录是由<code>(...)</code>包含的一组值：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">'大宝'</span>, <span class="string">'M'</span>, <span class="number">87</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">'二宝'</span>, <span class="string">'M'</span>, <span class="number">81</span>);</span><br></pre></td></tr></table></figure>

<h4 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h4><p>如果希望插入一条新记录（INSERT），但如果记录已经存在，就先删除原记录，再插入新记录。此时，可以使用<code>REPLACE</code>语句，这样就不必先查询，再决定是否先删除再插入：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<p>若 id=1 的记录不存在，<code>REPLACE</code>语句将插入新记录，否则，当前 id=1 的记录将被删除，然后再插入新记录。</p>
<h4 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h4><p>如果希望插入一条新记录（INSERT），但如果记录已经存在，就更新该记录，此时，可以使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="keyword">name</span>=<span class="string">'小明'</span>, gender=<span class="string">'F'</span>, score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure>

<p>若 id=1 的记录不存在，<code>INSERT</code>语句将插入新记录，否则，当前 id=1 的记录将被更新，更新的字段由<code>UPDATE</code>指定。</p>
<h4 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h4><p>如果希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略，此时，可以使用<code>INSERT IGNORE INTO ...</code>语句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<p>若 id=1 的记录不存在，<code>INSERT</code>语句将插入新记录，否则，不执行任何操作。</p>
<h4 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h4><p>如果查询结果集需要写入到表中，可以结合<code>INSERT</code>和<code>SELECT</code>，将<code>SELECT</code>语句的结果集直接插入到指定表中。</p>
<p>例如，创建一个统计成绩的表<code>statistics</code>，记录各班的平均成绩：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">statistics</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>然后就可以用一条语句写入各班的平均成绩：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">statistics</span> (class_id, average) <span class="keyword">SELECT</span> class_id, <span class="keyword">AVG</span>(score) <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure>

<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><p>如果要更新数据库表中的记录，就必须使用<code>UPDATE</code>语句。该语句的基本语法是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> &lt;表名&gt; <span class="keyword">SET</span> 字段<span class="number">1</span>=值<span class="number">1</span>, 字段<span class="number">2</span>=值<span class="number">2</span>, ... <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'你猜'</span>, score=<span class="number">66</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>在<code>UPDATE</code>语句中，更新字段时可以使用表达式。例如，把所有 80 分以下的同学的成绩加 10 分：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=score+<span class="number">10</span> <span class="keyword">WHERE</span> score&lt;<span class="number">80</span>;</span><br></pre></td></tr></table></figure>

<p>UPDATE 语句可以没有<code>WHERE</code>条件，例如：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=<span class="number">60</span>;</span><br></pre></td></tr></table></figure>

<p>这时，整个表的所有记录都会被更新。</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>如果要删除数据库表中的记录，可以使用<code>DELETE</code>语句。该语句的基本语法是：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> &lt;表名&gt; <span class="keyword">WHERE</span> ...;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">5</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt;=<span class="number">7</span>;</span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>在执行 SQL 语句的时候，某些业务要求，一系列操作必须全部执行，而不能仅执行一部分。数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。如果事务失败，那么效果就和没有执行这些 SQL 一样，不会对数据库数据有任何改动。</p>
<p>可见，数据库事务具有这 4 个特性：</p>
<ul>
<li>Atomic，原子性，将所有 SQL 作为原子工作单元执行，要么全部执行，要么全部不执行；</li>
<li>Consistent，一致性，事务完成后，所有数据的状态都是一致的，比如转账， A 账户只要减去了 100，B 账户则必定加上了 100；</li>
<li>Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其它事务隔离；</li>
<li>Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li>
</ul>
<p>对于单条 SQL 语句，数据库系统自动将其作为一个事务执行，这种事务被称为隐式事务。</p>
<p>要手动把多条 SQL 语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务，这种事务被称为显式事务，例如，把上述的转账操作作为一个显式事务：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure>

<p>很显然多条 SQL 语句要想作为一个事务执行，就必须使用显式事务。<code>COMMIT</code>是指提交事务，即试图把事务内的所有 SQL 所做的修改永久保存。如果<code>COMMIT</code>语句执行失败了，整个事务也会失败。</p>
<p>有些时候，希望主动让事务失败，这时，可以用<code>ROLLBACK</code>回滚事务，整个事务会失败：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance + <span class="number">100</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure>

<p>数据库事务是由数据库系统保证的，开发者只需要根据业务逻辑使用它就可以。</p>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让开发者有针对性地选择事务的隔离级别，避免数据不一致的问题。</p>
<p>SQL 标准定义了 4 种隔离级别，分别对应可能出现的数据不一致的情况：</p>
<h4 id="Read-Uncommitted"><a href="#Read-Uncommitted" class="headerlink" title="Read Uncommitted"></a>Read Uncommitted</h4><p><code>Read Uncommitted</code>是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）。</p>
<h4 id="Read-Committed"><a href="#Read-Committed" class="headerlink" title="Read Committed"></a>Read Committed</h4><p>在<code>Read Committed</code>隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。</p>
<p>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</p>
<h4 id="Repeatable-Read"><a href="#Repeatable-Read" class="headerlink" title="Repeatable Read"></a>Repeatable Read</h4><p>在<code>Repeatable Read</code>隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。</p>
<p>幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。</p>
<h4 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h4><p><code>Serializable</code>是最严格的隔离级别。在<code>Serializable</code>隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。</p>
<p>虽然<code>Serializable</code>隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用 Serializable 隔离级别。</p>
<p>（以上内容摘抄于网络，仅作为个人学习笔记，不适合作为学习教程。）</p>
]]></content>
      
        <categories>
            
            <category> 后端 </category>
            
            <category> 数据库 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Node和OAuth2.0构建一个简单的REST API]]></title>
      <url>/2018/08/22/201802200830/</url>
      <content type="html"><![CDATA[<p>JavaScript 在网络上无处不在。基本上每个网页都或多或少包含一些 JavaScript 代码，即使没有，你的浏览器或许也装了一些拓展附件，这些拓展附件能够将一部分 JavaScript 代码注入网页中。2018 年依旧如此。</p>
<p>JavaScript 也可以在浏览器之外使用，从托管网络服务器到控制 RC 汽车或者运行一个成熟的操作系统。有些时候你想要两台服务器互相通信，无论是本地网络还是互联网上。</p>
<p>今天，我会向你展示怎样使用 node.js 创建一个 REST API，同时使用 OAuth2.0 维护它，以防止未经授权的请求。REST API 遍布整个网络，但是如果没有合适的工具那么就需要大量的模板代码。我会向你展示怎样使用两个神奇的工具，这两个工具能使工作更轻松，包括用 OKta 实现客户端凭证流（翻译“Client Credentials Flow”这个词组时自己认怂了，只好用百度翻译了 😂。），它能不使用用户上下文而将两台机器安全地连接在一起。</p>
<h2 id="构建一个-REST-类型的-Node-API-服务器"><a href="#构建一个-REST-类型的-Node-API-服务器" class="headerlink" title="构建一个 REST 类型的 Node API 服务器"></a>构建一个 REST 类型的 Node API 服务器</h2><p>通过使用<a href="https://expressjs.com/" target="_blank" rel="noopener" title="Express JavaScript library">Express JavaScript library</a>能够让创建 Node 网络服务器更加简单。创建一个文件夹用来包含你的服务器项目。</p>
<blockquote>
<p>$ mkdir rest-api</p>
</blockquote>
<p>Node 使用<strong>package.json</strong>文件来管理依赖项并且规范（感觉“define”翻译成“规范”更合适。）你的项目。使用<code>npm init</code>命令创建一个，（执行这个命令后）会问你一些问题，这些问题是用来帮你初始化这个项目。截止到现在，你能够使用标准的 JS 来强制规范你的编码，并且将其用作测试。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> rest-api</span><br><span class="line"></span><br><span class="line">$ npm init</span><br><span class="line">This utility will walk you through creating a package.json file.</span><br><span class="line">It only covers the most common items, and tries to guess sensible defaults.</span><br><span class="line"></span><br><span class="line">See `npm <span class="built_in">help</span> json` <span class="keyword">for</span> definitive documentation on these fields</span><br><span class="line">and exactly what they <span class="keyword">do</span>.</span><br><span class="line"></span><br><span class="line">Use `npm install &lt;pkg&gt;` afterwards to install a package and</span><br><span class="line">save it as a dependency <span class="keyword">in</span> the package.json file.</span><br><span class="line"></span><br><span class="line">Press ^C at any time to quit.</span><br><span class="line">package name: (rest-api)</span><br><span class="line">version: (1.0.0)</span><br><span class="line">description: A parts catalog</span><br><span class="line">entry point: (index.js)</span><br><span class="line"><span class="built_in">test</span> <span class="built_in">command</span>: standard</span><br><span class="line">git repository:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">license: (ISC)</span><br><span class="line">About to write to /Users/Braden/code/rest-api/package.json:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"rest-api"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"A parts catalog"</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"standard"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Is this OK? (yes)</span><br></pre></td></tr></table></figure>

<p>默认的（文件）入口是<strong>index.js</strong>，所以你应该用这个名称创建一个新文件。下面的代码给你提供了一个相当基础的服务器（案例），它只是监听了本机（127.0.0.1）3000 端口，但是没有做任何其他事情。</p>
<p><strong>index.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startServer = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> port = process.env.SERVER_PORT || <span class="number">3000</span></span><br><span class="line">  <span class="keyword">await</span> promisify(app.listen).bind(app)(port)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startServer()</span><br></pre></td></tr></table></figure>

<p>(分号是自己添加的，绝大多数情况下没有分号程序不会报错，但有一些特殊情况没了会报错，还是养成添加分号的习惯吧。)</p>
<p><strong>util</strong>模块中的<strong>promisify</strong>功能让你传入一个具有（传统）回调功能的函数，而返回给你一个 Promise 式的回调函数，Promise 是异步处理的新标准。这也同样让我们使用最近比较新的<strong>async/await</strong>语法，能够使代码更优雅。</p>
<p>为了使其运行起来，你需要装上你在文件开头<strong>require</strong>的依赖包。通过使用<code>npm intall</code>安装他们。依赖信息将会自动保存到你的<strong>package.json</strong>文件，并将依赖包安装到本地<strong>node_modules</strong>文件夹中。</p>
<p><strong>注意：</strong>你不应该将<strong>node_modules</strong>（文件夹及其内容）提交到资源管理器中，因为它会很快变大（占据空间），（再者）<strong>package.json</strong>文件（已经）保存了你使用的每一个依赖包的确切版本，如果你在另一台计算机上安装它，会得到相同的代码。</p>
<blockquote>
<p>$ npm install <a href="mailto:express@4.16.3">express@4.16.3</a> util@0.11.0</p>
</blockquote>
<p>对于一些快速更新的依赖包（我猜是这个意思。），安装<strong>standard</strong>作为<strong>dev</strong>依赖项，然后运行起来以确保正常。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev standard@11.0.1</span><br><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">&gt; rest-api@1.0.0 <span class="built_in">test</span> /Users/bmk/code/okta/apps/rest-api</span><br><span class="line">&gt; standard</span><br></pre></td></tr></table></figure>

<p>如果一切正常，你不应该看到在<strong>&gt; standard</strong>这一行有任何输出内容。如果报错，可能是这个样子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">&gt; rest-api@1.0.0 <span class="built_in">test</span> /Users/bmk/code/okta/apps/rest-api</span><br><span class="line">&gt; standard</span><br><span class="line"></span><br><span class="line">standard: Use JavaScript Standard Style (https://standardjs.com)</span><br><span class="line">standard: Run `standard --fix` to automatically fix some problems.</span><br><span class="line">  /Users/Braden/code/rest-api/index.js:3:7: Expected consistent spacing</span><br><span class="line">  /Users/Braden/code/rest-api/index.js:3:18: Unexpected trailing comma.</span><br><span class="line">  /Users/Braden/code/rest-api/index.js:3:18: A space is required after <span class="string">','</span>.</span><br><span class="line">  /Users/Braden/code/rest-api/index.js:3:38: Extra semicolon.</span><br><span class="line">npm ERR! Test failed.  See above <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure>

<p>既然你的代码已经准备好而且依赖包已经安装好，你可以通过<code>node .</code>（命令）运行你的服务。（** . <strong>指的是查看当前文件夹，检查</strong>package.json<strong>文件找到此目录中要使用的主文件是</strong>index.js**。）：</p>
<blockquote>
<p>$ node .</p>
</blockquote>
<p>为了测试服务是否正在运行，你可以使用<code>curl</code>命令。（由于）没有 ENDPOINTS（“ENDPOINTS”只可意会不可言传，不知如何翻译。），所以会返回一个错误：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000 -i HTTP/1.1 404 Not Found X-Powered-By: Express</span><br><span class="line">Content-Security-Policy: default-src 'self' X-Content-Type-Options: nosniff</span><br><span class="line">Content-Type: text/html; charset=utf-8 Content-Length: 139 Date: Thu, 16 Aug</span><br><span class="line">2018 01:34:53 GMT Connection: keep-alive</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>Cannot GET /<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>尽管报了一个错误，但依旧是好消息。你还没有设置任何 ENDPOINTS，所以 Express 返回一个 404 错误。如果你的服务根本没有运行，则会得到如下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000 -i</span><br><span class="line">curl: (7) Failed to connect to localhost port 3000: Connection refused</span><br></pre></td></tr></table></figure>

<h2 id="使用-Node、Express、Sequelize-和-Epilogue-构建-REST-类型的-API"><a href="#使用-Node、Express、Sequelize-和-Epilogue-构建-REST-类型的-API" class="headerlink" title="使用 Node、Express、Sequelize 和 Epilogue 构建 REST 类型的 API"></a>使用 Node、Express、Sequelize 和 Epilogue 构建 REST 类型的 API</h2><p>既然你已经有了一个能够工作的 Express 服务器，那么就可以添加一个 REST API。事实上这比你想象的容易得多。使用<a href="http://docs.sequelizejs.com/" target="_blank" rel="noopener" title="Sequelize">Sequelize</a>规范数据库模式是我见过的最简单的方法，而使用<a href="https://github.com/dchester/epilogue" target="_blank" rel="noopener" title="Epilogue">Epilogue</a>创建 REST API ENDPOINTS 几乎达到了零样板。</p>
<p>你需要添加这些依赖包到你的项目中。<strong>Sequelize</strong>需要知道怎样与数据库进行通信。现在，使用<strong>SQLite</strong>，因为它能让我们快速启动和运行。</p>
<blockquote>
<p>$ npm install <a href="mailto:sequelize@4.38.0">sequelize@4.38.0</a> epilogue@0.7.1 <a href="mailto:sqlite3@4.0.2">sqlite3@4.0.2</a></p>
</blockquote>
<p>用下面的代码创建一个<strong>database.js</strong>文件。我会接下来更详细地解释每一部分。</p>
<p><strong>database.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> epilogue = <span class="built_in">require</span>(<span class="string">'epilogue'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> database = <span class="keyword">new</span> Sequelize(&#123;</span><br><span class="line">  dialect: <span class="string">'sqlite'</span>,</span><br><span class="line">  storage: <span class="string">'./test.sqlite'</span>,</span><br><span class="line">  operatorsAliases: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Part = database.define(<span class="string">'parts'</span>, &#123;</span><br><span class="line">  partNumber: Sequelize.STRING,</span><br><span class="line">  modelNumber: Sequelize.STRING,</span><br><span class="line">  name: Sequelize.STRING,</span><br><span class="line">  description: Sequelize.TEXT,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initializeDatabase = <span class="keyword">async</span> (app) =&gt; &#123;</span><br><span class="line">  epilogue.initialize(&#123; app, <span class="attr">sequelize</span>: database &#125;)</span><br><span class="line"></span><br><span class="line">  epilogue.resource(&#123;</span><br><span class="line">    model: Part,</span><br><span class="line">    endpoints: [<span class="string">'/parts'</span>, <span class="string">'/parts/:id'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> database.sync()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = initializeDatabase</span><br></pre></td></tr></table></figure>

<p>现在你只需要导入这个文件到你的主应用程序并运行初始化功能。在你的<strong>index.js</strong>文件中添加如下内容。</p>
<p><strong>index.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-2</span>,<span class="number">10</span> +<span class="number">2</span>,<span class="number">14</span> @@ <span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">+<span class="keyword">const</span> initializeDatabase = <span class="built_in">require</span>(<span class="string">'./database'</span>);</span><br><span class="line">+</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startServer = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">+  <span class="keyword">await</span> initializeDatabase(app);</span><br><span class="line">+</span><br><span class="line"> <span class="keyword">const</span> port = process.env.SERVER_PORT || <span class="number">3000</span>;</span><br><span class="line"> <span class="keyword">await</span> promisify(app.listen).bind(app)(port);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure>

<p>你现在能测试语法错误，如果一切正常运行这个程序：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="built_in">test</span> &amp;&amp; node .</span><br><span class="line"></span><br><span class="line">&gt; rest-api@1.0.0 <span class="built_in">test</span> /Users/bmk/code/okta/apps/rest-api</span><br><span class="line">&gt; standard</span><br><span class="line"></span><br><span class="line">Executing (default): CREATE TABLE IF NOT EXISTS `parts` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `partNumber` VARCHAR(255), `modelNu</span><br><span class="line">mber` VARCHAR(255), `name` VARCHAR(255), `description` TEXT, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);</span><br><span class="line">Executing (default): PRAGMA INDEX_LIST(`parts`)</span><br><span class="line">Listening on port 3000</span><br></pre></td></tr></table></figure>

<p>在另一个终端中，你能测试这是否真实有效（我使用<a href="https://github.com/trentm/json" target="_blank" rel="noopener" title="json CLI">json CLI</a>来格式化 JSON 响应，用<code>npm install --global json</code>进行全局安装。）：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/parts</span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">$ curl localhost:3000/parts -X POST -d '&#123;</span><br><span class="line">  "partNumber": "abc-123",</span><br><span class="line">  "modelNumber": "xyz-789",</span><br><span class="line">  "name": "Alphabet Soup",</span><br><span class="line">  "description": "Soup with letters and numbers in it"</span><br><span class="line">&#125;' -H 'content-type: application/json' -s0 | json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"partNumber"</span>: <span class="string">"abc-123"</span>,</span><br><span class="line">  <span class="attr">"modelNumber"</span>: <span class="string">"xyz-789"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Alphabet Soup"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Soup with letters and numbers in it"</span>,</span><br><span class="line">  <span class="attr">"updatedAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span>,</span><br><span class="line">  <span class="attr">"createdAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ curl localhost:3000/parts -s0 | json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"partNumber"</span>: <span class="string">"abc-123"</span>,</span><br><span class="line">    <span class="attr">"modelNumber"</span>: <span class="string">"xyz-789"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Alphabet Soup"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Soup with letters and numbers in it"</span>,</span><br><span class="line">    <span class="attr">"createdAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span>,</span><br><span class="line">    <span class="attr">"updatedAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="Node-API-工作原理"><a href="#Node-API-工作原理" class="headerlink" title="Node API 工作原理"></a>Node API 工作原理</h3><p>如果你着急看后面的可以跳过本部分，但我保证你会有收获。</p>
<p><strong>Sequelize</strong>函数会创建一个数据库。这是你配置详细信息的地方，例如你要用 SQL 的什么规范。现在，使用 SQLite 快速启动和运行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> database = <span class="keyword">new</span> Sequelize(&#123;</span><br><span class="line">  dialect: <span class="string">'sqlite'</span>,</span><br><span class="line">  storage: <span class="string">'./test.sqlite'</span>,</span><br><span class="line">  operatorsAliases: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一旦你创建了数据库，就可以使用<strong>database.define</strong>文件为每一个表定义模式。创建一个名为<strong>parts</strong>的表，其中包含了一些有用的字段以跟踪 PARTS。默认情况下，当你创建或者更新一个 row 时，Sequelize 会自动创建更新<strong>id</strong>、<strong>createdAt</strong>和<strong>updatedAt</strong>字段。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Part = database.define(<span class="string">'parts'</span>, &#123;</span><br><span class="line">  partNumber: Sequelize.STRING,</span><br><span class="line">  modelNumber: Sequelize.STRING,</span><br><span class="line">  name: Sequelize.STRING,</span><br><span class="line">  description: Sequelize.TEXT,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>Epilogue 需要连接 Express 中的<strong>app</strong>变量才能添加 ENDPOINTS。然而，<strong>app</strong>变量是在另外一个文件定义的。解决这个问题的一个方法是 export（导出）一个函数，这个函数包含 app 变量并对其进行处理。在另一个（使用 app 变量的）文件中，你可以 import（导入）这个脚本，像<code>initializeDatabase(app)</code>一样运行它。</p>
<p>Epilogue 需要用<strong>app</strong>和<strong>database</strong>进行初始化。然后定义你想要使用的 REST ENDPOINTS。<strong>resource</strong>函数会包括<strong>GET</strong>、<strong>POST</strong>、<strong>PUT</strong>、<strong>DELETE</strong>功能的 ENDPOINTS，主要用来自动执行的。</p>
<p>为了准确创建数据库，你需要运行<strong>database.sync()</strong>，这将返回一个 Promise 对象。在启动服务器之前，你需要等待它结束。</p>
<p><strong>module.exports</strong>命令表示<strong>initializeDatabase</strong>函数可以被其他文件导入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeDatabase = <span class="keyword">async</span> (app) =&gt; &#123;</span><br><span class="line">  epilogue.initialize(&#123; app, <span class="attr">sequelize</span>: database &#125;)</span><br><span class="line"></span><br><span class="line">  epilogue.resource(&#123;</span><br><span class="line">    model: Part,</span><br><span class="line">    endpoints: [<span class="string">'/parts'</span>, <span class="string">'/parts/:id'</span>],</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> database.sync()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = initializeDatabase</span><br></pre></td></tr></table></figure>

<h2 id="使用-OAuth2-0-来保护你的-Node-Express-REST-API"><a href="#使用-OAuth2-0-来保护你的-Node-Express-REST-API" class="headerlink" title="使用 OAuth2.0 来保护你的 Node + Express REST API"></a>使用 OAuth2.0 来保护你的 Node + Express REST API</h2><p>现在你已经启动了一个 REST API 并且运行起来，假设你想要一个特定的应用程序从远程位置使用它。如果你把它按原样放在互联网上，那么任何人都可以随意添加、修改或者删除部件。</p>
<p>为了避免这种情况，你可以使用 OAuth2.0 客户端凭据流。这是一种让两个服务器相互通信而不需要用户上下文的方法。两台服务器必须达成协议才能使用第三方授权服务器。假设有两个服务器，A 和 B，以及一个授权服务器，服务器 A 托管 REST API，服务器 B 希望访问这个 API。</p>
<ul>
<li>服务器 B 向授权服务器发送一个密钥以验证身份并且同时请求一个临时令牌（temporary token）。</li>
<li>然后服务器 B 像往常一样使用（consume）REST API，但随着请求一起发送令牌。</li>
<li>服务器 A 向授权服务器请求一些可用于验证（verify）令牌的元数据（metadata）。</li>
<li>服务器 A 验证服务器 B 的请求。<ul>
<li>如果有效（valid），将会发送成功的响应。</li>
<li>如果令牌无效（invalid），则发送错误信息，并且不会泄露（leaked）敏感信息（sensitive information）。</li>
</ul>
</li>
</ul>
<h3 id="创建一个授权服务器"><a href="#创建一个授权服务器" class="headerlink" title="创建一个授权服务器"></a>创建一个授权服务器</h3><p>这里是开始使用 Okta 的地方。Okta 能够充当一个授权服务器用来保护你的数据。你可能会问自己“为什么用 Okta？”。那是因为，使用 Okta（不仅）构建一个 REST 应用程序相当炫酷，（而且）构建一个安全的 REST 应用程序更炫酷。要实现这些，你需要添加身份验证（authentication ），以便用户在查看/修改（viewing/modifying）之前必须登录。Okta 的目标是使<a href="https://developer.okta.com/product/user-management/" target="_blank" rel="noopener" title="身份管理">身份管理</a>（identity management）比你往常使用的更简单、更安全而且更具有扩展性（scalable）。Okta 是一种云服务，允许开发者创建、编辑和安全存储用户账户和用户账户数据，并将它们与一个或者多个应用程序连接。我们的 API 使你能够：</p>
<ul>
<li><a href="https://developer.okta.com/product/authentication/" target="_blank" rel="noopener" title="验证">验证</a>（authenticate）和<a href="https://developer.okta.com/product/authorization/" target="_blank" rel="noopener" title="授权">授权</a>（authorize）用户；</li>
<li>存储有关用户的数据；</li>
<li>执行（perform）基于密码和<a href="https://developer.okta.com/authentication-guide/social-login/" target="_blank" rel="noopener" title="社交登录">社交登录</a>；</li>
<li>通过<a href="https://developer.okta.com/use_cases/mfa/" target="_blank" rel="noopener" title="多因素身份验证">多因素身份验证</a>（multi-factor authentication）确保应用程序的安全；</li>
<li>如需了解更多，请查看<a href="https://developer.okta.com/documentation/" target="_blank" rel="noopener" title="产品文档">产品文档</a>。</li>
</ul>
<p>如果你还没有，请<a href="https://developer.okta.com/signup/" target="_blank" rel="noopener" title="注册一个永久免费的账户">注册一个永久免费的账户</a>并且开始吧！</p>
<p>创建账户后，登陆开发人员控制台，导航到<strong>API</strong>，然后转到<strong>Authorization Servers</strong>选项，点击指向默认服务器的链接。</p>
<p>从<strong>Settings</strong>选项中，复制<strong>Issuer</strong>字段。你需要将此保存到你的 Node 应用程序可以读取的地方。在项目中，创建一个名为<strong>.env</strong>的文件，如下所示：</p>
<p><strong>.env 文件内容：</strong></p>
<p><code>ISSUER=https://{yourOktaDomain}/oauth2/default</code></p>
<p><strong>ISSUER</strong>的值应该是设置页<strong>Issuer URI</strong>字段的值。</p>
<figure class="image-box">
                <img src="issuer-afa0da4b4f632196092a4da8f243f3bec37615602dc5b62e8e34546fd1018333.png" alt="" title="" class="">
                <p></p>
            </figure>

<p><strong>注意：</strong>通常情况下，你不应该把<strong>.env</strong>文件存储在源代码管理器（source control）中。这允许多个项目使用相同的源代码（source code），而不需要单独的分叉（fork）。它可以确保你的安全信息不会被公开（尤其是你将要把源代码作为开源代码发布时）。</p>
<p>接下来，导航到<strong>Scopes</strong>选项卡，点击<strong>Add Scope</strong>按钮并为你的 REST API 创建一个作用域（scope）。你需要给它起个名字（比如<code>parts_manager</code>），如果你愿意你可以给它一个描述（介绍）。</p>
<figure class="image-box">
                <img src="adding-scope-f3ecb3b4eec06d616a130400245843c0de2dd52a54b2fdcff7449a10a2ce75ed.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>你还应该将作用域名称添加到<strong>.env</strong>文件中，这样代码就可以访问它。</p>
<p><strong>.env 文件内容：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ISSUER&#x3D;https:&#x2F;&#x2F;&#123;yourOktaDomain&#125;&#x2F;oauth2&#x2F;default</span><br><span class="line">SCOPE&#x3D;parts_manager</span><br></pre></td></tr></table></figure>

<p>现在你需要创建一个客户端。导航到<strong>Applications</strong>，然后点击<strong>Add Application</strong>，选择<strong>Service</strong>，然后点击<strong>Next</strong>。输入你的服务名称（例如<strong>Parts Manager</strong>），然后点击<strong>Done</strong>。</p>
<p>这将带你到一个具有你的客户凭据（credentials）的页面。这些是服务器 B（将使用 RESTAPI 的服务器）进行身份验证所需的凭据。对于本例，客户机和服务器代码在同一个存储库中，因此继续将此数据添加到<strong>.env</strong>文件中。确保用此页中的值替换<strong>{yourClientId}</strong>和<strong>{yourClientSecret}</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CLIENT_ID&#x3D;&#123;yourClientId&#125;</span><br><span class="line">CLIENT_SECRET&#x3D;&#123;yourClientSecret&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建中间件验证-Express-中的令牌"><a href="#创建中间件验证-Express-中的令牌" class="headerlink" title="创建中间件验证 Express 中的令牌"></a>创建中间件验证 Express 中的令牌</h3><p>在 Express 中，你可以添加将在每个端点之前运行的中间件。然后，你可以添加元数据、设置头、记录一些信息，甚至提前取消请求并发送错误消息。在这种情况下，你需要创建一些中间件来验证客户机发送的令牌。如果令牌有效，它将继续到 REST API 并返回适当的响应（appropriate response）。如果令牌无效，它将改为响应一条错误消息，以便只有授权的计算机可以访问。</p>
<p>为了验证令牌，可以使用 Okta 的中间件。你还需要一个名为<a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener" title="dotenv">dotenv</a>的工具来加载环境变量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install dotenv@6.0.0 @okta&#x2F;jwt-verifier@0.0.12</span><br></pre></td></tr></table></figure>

<p>现在创建一个名为<strong>auth.js</strong>的文件，该文件将导出中间件：</p>
<p><strong>auth.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> OktaJwtVerifier = <span class="built_in">require</span>(<span class="string">'@okta/jwt-verifier'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oktaJwtVerifier = <span class="keyword">new</span> OktaJwtVerifier(&#123; <span class="attr">issuer</span>: process.env.ISSUER &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; authorization &#125; = req.headers</span><br><span class="line">    <span class="keyword">if</span> (!authorization) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'You must send an Authorization header'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [authType, token] = authorization.trim().split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">if</span> (authType !== <span class="string">'Bearer'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected a Bearer token'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; claims &#125; = <span class="keyword">await</span> oktaJwtVerifier.verifyAccessToken(token)</span><br><span class="line">    <span class="keyword">if</span> (!claims.scp.includes(process.env.SCOPE)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not verify the proper scope'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    next()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    next(error.message)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个函数首先检查<strong>authorization</strong>是否在请求中，否则抛出错误。如果它存在，它应该看起来像<strong>Bearer {token}</strong>，其中<strong>{token}</strong>是<a href="https://www.jsonwebtoken.io/" target="_blank" rel="noopener" title="JWT">JWT</a>字符串。如果（请求）头不是以<strong>bearer</strong>开头将会引发另一个错误。然后我们把令牌发送给<a href="https://www.jsonwebtoken.io/" target="_blank" rel="noopener" title="Okta的JWT验证器">Okta 的 JWT 验证器</a>以验证令牌。如果令牌无效，JWT 验证器将抛出一个错误。否则，它将返回包含一些信息的对象。然后你可以验证它是否包含你期望的作用域。</p>
<p>如果一切都成功了，它将调用（call）不带任何参数（parameters）的<strong>next()</strong>函数。它告诉 Express 可以转到链中的<strong>下一个</strong>函数（另一个中间件或最后一个 ENDPOINT）。如果你传递一个字符串给下一个函数，Express 会将其视为一个错误，该错误将传递回客户机，并且不会在链中继续。</p>
<p>你仍然需要导入这个函数并将其作为中间件添加到应用程序中。你也同样需要在 index 文件头部加载<strong>dotenv</strong>，以保证来自<strong>.env</strong>的环境变量加载到你的应用程序中。对<strong>index.js</strong>做出以下更改。</p>
<p><strong>index.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@@ <span class="number">-1</span>,<span class="number">11</span> +<span class="number">1</span>,<span class="number">14</span> @@</span><br><span class="line">+<span class="built_in">require</span>(<span class="string">'dotenv'</span>).config();</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">+<span class="keyword">const</span> authMiddleware = <span class="built_in">require</span>(<span class="string">'./auth'</span>);</span><br><span class="line"><span class="keyword">const</span> initializeDatabase = <span class="built_in">require</span>(<span class="string">'./database'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">+app.use(authMiddleware);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> startServer = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> initializeDatabase(app);</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p>要测试请求是否被正确阻止，请尝试再次运行它…</p>
<blockquote>
<p>$ npm test &amp;&amp; node .</p>
</blockquote>
<p>…然后在另一个终端中运行一些<strong>curl</strong>命令来测试：</p>
<p>需要授权头</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/parts</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>You must send an Authorization header<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>授权头中需要无记名令牌（Bearer token）</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/parts -H 'Authorization: Basic asdf:1234'</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>Expected a Bearer token<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>令牌有效</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ curl localhost:3000/parts -H 'Authorization: Bearer asdf'</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span>Jwt cannot be parsed<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-Node-创建测试客户端"><a href="#使用-Node-创建测试客户端" class="headerlink" title="使用 Node 创建测试客户端"></a>使用 Node 创建测试客户端</h3><p>你现在已经为没有有效令牌的人禁用了对应用程序的访问，但是你如何获取令牌并使用它？我将向你展示如何用 Node 编写一个简单的客户机，这也将帮助你测试有效的令牌是否有效。</p>
<blockquote>
<p>$ npm install <a href="mailto:btoa@1.2.1">btoa@1.2.1</a> request-promise@4.2.2</p>
</blockquote>
<p><strong>client.js 文件内容：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request-promise'</span>)</span><br><span class="line"><span class="keyword">const</span> btoa = <span class="built_in">require</span>(<span class="string">'btoa'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ISSUER, CLIENT_ID, CLIENT_SECRET, SCOPE &#125; = process.env</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [, , uri, method, body] = process.argv</span><br><span class="line"><span class="keyword">if</span> (!uri) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Usage: node client &#123;url&#125; [&#123;method&#125;] [&#123;jsonData&#125;]'</span>)</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sendAPIRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> token = btoa(<span class="string">`<span class="subst">$&#123;CLIENT_ID&#125;</span>:<span class="subst">$&#123;CLIENT_SECRET&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> auth = <span class="keyword">await</span> request(&#123;</span><br><span class="line">      uri: <span class="string">`<span class="subst">$&#123;ISSUER&#125;</span>/v1/token`</span>,</span><br><span class="line">      json: <span class="literal">true</span>,</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        authorization: <span class="string">`Basic <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      form: &#123;</span><br><span class="line">        grant_type: <span class="string">'client_credentials'</span>,</span><br><span class="line">        scope: SCOPE,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> request(&#123;</span><br><span class="line">      uri,</span><br><span class="line">      method,</span><br><span class="line">      body,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        authorization: <span class="string">`<span class="subst">$&#123;auth.token_type&#125;</span> <span class="subst">$&#123;auth.access_token&#125;</span>`</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Error: <span class="subst">$&#123;error.message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendAPIRequest()</span><br></pre></td></tr></table></figure>

<p>这里的代码将来自<strong>.env</strong>文件中的变量加载到环境中，然后从 Node 中获取变量。Node 将环境变量存储在<strong>process.env</strong>文件中（<strong>process</strong>是一个全局变量，包含一系列有用的变量和函数。）。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'dotenv'</span>).config()</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> &#123; ISSUER, CLIENT_ID, CLIENT_SECRET, SCOPE &#125; = process.env</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>接下来，由于这将从命令行运行，你可以再次使用<strong>process</strong>来获取用<strong>process.argv</strong>传入的参数。这将为你提供一个数组，其中包含传入的所有参数。前两个逗号（commas）前面没有变量名，因为前两个逗号在本例中并不重要；它们只是通向<strong>node</strong>的路径和脚本的名称（<strong>client</strong>或<strong>client.js</strong>）。</p>
<p>URL 是必需的，它将包括 ENDPOINT，但方法和 JSON 数据是可选的（optional）。默认的方法是<strong>GET</strong>，所以如果你只是提取数据，你可以忽略掉它。在这种情况下，你也不需要任何有效载荷（payload）。如果参数看起来不正确，那么这将退出程序，并显示错误消息和退出代码** 1 **来表示错误。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [, , uri, method, body] = process.argv</span><br><span class="line"><span class="keyword">if</span> (!uri) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Usage: node client &#123;url&#125; [&#123;method&#125;] [&#123;jsonData&#125;]'</span>)</span><br><span class="line">  process.exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Node 当前不允许在主线程中（main thread）<strong>await</strong>，因此要使用简洁的<strong>async/await</strong>语法，你不得不创建一个函数，然后调用它。</p>
<p>If an error occurs in any of the awaited functions（如果在任何<strong>awaited</strong>函数中发生错误）,the <strong>try/catch</strong> they’ll be printed out to the screen.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sendAPIRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">`Error: <span class="subst">$&#123;error.message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sendAPIRequest()</span><br></pre></td></tr></table></figure>

<p>这是客户端向授权服务器发送令牌请求的地方。为了使用授权服务器本身进行授权，你需要使用 Basic Auth。Basic Auth 与浏览器在获得一个要求用户名和密码的内置弹出窗口时使用的相同。假设（say）你的用户名是<strong>AzureDiamond</strong>，密码是<strong>hunter2</strong>。你的浏览器将它们与冒号（英文冒号）连接在一起，然后用 base64（这是 btoa 函数所做的）对它们进行编码（encode），以获得<strong>QXp1cmVEaWFtb25kOmh1bnRlcjI=</strong>。然后发送<strong>Basic QXp1cmVEaWFtb25kOmh1bnRlcjI=</strong>授权头。然后，服务器可以使用 base64 解码（decode）令牌以获取用户名和密码。</p>
<p>传统的授权（原文是“Basic authorization”。）本质上（inherently ）不安全，因为它很容易解码，这就是为什么<strong>https</strong>对于防止中间人攻击（a man-in-the-middle attack）很重要的原因。在这里，客户机 ID（client ID）和客户机 Secret（client secret）分别是用户名和密码，这也是为什么你的<strong>CLIENT_ID</strong>和<strong>CLIENT_SECRET</strong>要保密的原因。</p>
<p>对于 OAuth2.0，你还需要指定（specify）授权类型（grant type），在本例中，它是<strong>client_credentials</strong>，因为你计划在两台计算机之间进行对话。你还需要指定作用域。这里可以添加许多其他选项，但这是我们演示所需的全部内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> token = btoa(<span class="string">`<span class="subst">$&#123;CLIENT_ID&#125;</span>:<span class="subst">$&#123;CLIENT_SECRET&#125;</span>`</span>)</span><br><span class="line"><span class="keyword">const</span> auth = <span class="keyword">await</span> request(&#123;</span><br><span class="line">  uri: <span class="string">`<span class="subst">$&#123;ISSUER&#125;</span>/v1/token`</span>,</span><br><span class="line">  json: <span class="literal">true</span>,</span><br><span class="line">  method: <span class="string">'POST'</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    authorization: <span class="string">`Basic <span class="subst">$&#123;token&#125;</span>`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  form: &#123;</span><br><span class="line">    grant_type: <span class="string">'client_credentials'</span>,</span><br><span class="line">    scope: SCOPE,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>一旦你通过了身份验证（authenticated），将获得一个访问令牌，你可以将其发送到你的 REST API，它看起来应该类似于<strong>Bearer eyJra…HboUg</strong>（实际令牌比这个长得多，可能大约有 800 个字符。）。令牌包含了你向 REST API 证明你是谁、令牌何时到期所需的所有信息，以及各种其他信息，如请求的作用域、颁发者（issuer）和用于请求令牌的客户端 ID。</p>
<p>然后将来自 REST API 的响应打印到屏幕上。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> response = <span class="keyword">await</span> request(&#123;</span><br><span class="line">  uri,</span><br><span class="line">  method,</span><br><span class="line">  body,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    authorization: <span class="string">`<span class="subst">$&#123;auth.token_type&#125;</span> <span class="subst">$&#123;auth.access_token&#125;</span>`</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(response)</span><br></pre></td></tr></table></figure>

<p>现在去测试一下。再次使用<code>npm test &amp;&amp; node .</code>启动应用程序，然后尝试以下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">$ node client http://localhost:3000/parts | json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: 1,</span><br><span class="line">    <span class="string">"partNumber"</span>: <span class="string">"abc-123"</span>,</span><br><span class="line">    <span class="string">"modelNumber"</span>: <span class="string">"xyz-789"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Alphabet Soup"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Soup with letters and numbers in it"</span>,</span><br><span class="line">    <span class="string">"createdAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span>,</span><br><span class="line">    <span class="string">"updatedAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ node client http://localhost:3000/parts post <span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "partNumber": "ban-bd",</span></span><br><span class="line"><span class="string">  "modelNumber": 1,</span></span><br><span class="line"><span class="string">  "name": "Banana Bread",</span></span><br><span class="line"><span class="string">  "description": "Bread made from bananas"</span></span><br><span class="line"><span class="string">&#125;'</span> | json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: 2,</span><br><span class="line">  <span class="string">"partNumber"</span>: <span class="string">"ban-bd"</span>,</span><br><span class="line">  <span class="string">"modelNumber"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Banana Bread"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Bread made from bananas"</span>,</span><br><span class="line">  <span class="string">"updatedAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span>,</span><br><span class="line">  <span class="string">"createdAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ node client http://localhost:3000/parts | json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: 1,</span><br><span class="line">    <span class="string">"partNumber"</span>: <span class="string">"abc-123"</span>,</span><br><span class="line">    <span class="string">"modelNumber"</span>: <span class="string">"xyz-789"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Alphabet Soup"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Soup with letters and numbers in it"</span>,</span><br><span class="line">    <span class="string">"createdAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span>,</span><br><span class="line">    <span class="string">"updatedAt"</span>: <span class="string">"2018-08-16T02:22:09.446Z"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: 2,</span><br><span class="line">    <span class="string">"partNumber"</span>: <span class="string">"ban-bd"</span>,</span><br><span class="line">    <span class="string">"modelNumber"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Banana Bread"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Bread made from bananas"</span>,</span><br><span class="line">    <span class="string">"createdAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span>,</span><br><span class="line">    <span class="string">"updatedAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ node client http://localhost:3000/parts/1 delete | json</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">$ node client http://localhost:3000/parts | json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">"id"</span>: 2,</span><br><span class="line">    <span class="string">"partNumber"</span>: <span class="string">"ban-bd"</span>,</span><br><span class="line">    <span class="string">"modelNumber"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Banana Bread"</span>,</span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Bread made from bananas"</span>,</span><br><span class="line">    <span class="string">"createdAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span>,</span><br><span class="line">    <span class="string">"updatedAt"</span>: <span class="string">"2018-08-17T00:23:23.341Z"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>（到此翻译完了，以上翻译内容结合本人理解，如有问题请留言。）</p>
<p>原文链接：<a href="https://developer.okta.com/blog/2018/08/21/build-secure-rest-api-with-node?utm_source=com.alibaba.android.rimet&amp;utm_medium=social&amp;utm_oi=1037865074043592704" target="_blank" rel="noopener">https://developer.okta.com/blog/2018/08/21/build-secure-rest-api-with-node?utm_source=com.alibaba.android.rimet&amp;utm_medium=social&amp;utm_oi=1037865074043592704</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Node </category>
            
        </categories>
        
        
        <tags>
            
            <tag> REST API </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[URL重定向]]></title>
      <url>/2016/08/28/201608282022/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Web 开发中，经常会出现重定向的情况，重定向指的是将一个网络请求重新定个方向，向新的方向发起请求。常见的重定向有网页重定向，访问一个网页时却跳转到另外一个网页；也有域名重定向，向某个域名发起请求却自动变成请求另外一个域名。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>URL 重定向是由客户端完成的（通常是浏览器），客户端发出请求后，服务器做出响应，如果响应头的状态码为<strong>301</strong>或者<strong>302</strong>，此时响应头中会多出一个<strong>Location</strong>字段，该字段用来表示需要重定向到的新位置。<strong>301</strong>与<strong>302</strong>都是 HTTP 的状态码，都表示某个请求地址发生了重定向。<strong>301</strong>重定向表示的是<strong>永久重定向</strong>（Moved Permanently），表示请求的地址永久性地转移到另外一个地址，今后任何新的请求都应使用新的地址代替。<strong>302</strong>重定向表示的是<strong>临时重定向</strong>（Moved Temporarily），表示请求的地址临时性地转移到另外一个地址，不改变后续请求的地址。</p>
<figure class="image-box">
                <img src="703023-20160623003845360-1558726736.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="number">301</span>, &#123; <span class="attr">Location</span>: <span class="string">'http://example.com/'</span> &#125;)</span><br><span class="line">    <span class="comment">// res.writeHead(302, &#123;'Location': 'http://example.com/'&#125;);</span></span><br><span class="line"></span><br><span class="line">    res.end()</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：客户端会先判断状态码，只有当状态码是<strong>301</strong>或<strong>302</strong>时，客户端才会根据响应头中<strong>Location</strong>字段的值进行重定向。</p>
</blockquote>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p><strong>301</strong>重定向与<strong>302</strong>重定向有什么区别呢？</p>
<p>两者都表示重定向，其效果都是自动跳转到一个新的地址。不同在于，<strong>301</strong>表示原有地址的资源已经被永久地移除了，其资源无法访问了，搜索引擎在抓取新地址内容的同时会把原有地址的权重等信息转移到新的地址，也同时把原有地址的信息从引擎索引库中彻底废弃。浏览器也不会再缓存原有地址的资源。<strong>302</strong>表示临时重定向，原有地址的资源依旧存在，只是因为特殊原因临时进行重定向，搜索引擎在抓取新地址内容的同时不会把原有地址的信息从引擎索引库中彻底废弃。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p><strong>301</strong>重定向与<strong>302</strong>重定向分别在什么场景下应用呢？下面给了一些常见的场景。</p>
<h3 id="使用301重定向"><a href="#使用301重定向" class="headerlink" title="使用301重定向"></a>使用<strong>301</strong>重定向</h3><ul>
<li>原有域名不再使用。比如访问<strong><a href="http://www.xiaomi.com" target="_blank" rel="noopener">www.xiaomi.com</a></strong>（小米官网最早的域名）这个域名，直接重定向到<strong><a href="http://www.mi.com" target="_blank" rel="noopener">www.mi.com</a></strong>，此时使用<strong>301</strong>进行重定向。</li>
</ul>
<figure class="image-box">
                <img src="{6D7B9A3E-34DB-48F5-A6C5-E38545AAAB84}_20190622141836.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<ul>
<li><p>站点升级了协议（由<strong>http</strong>升级到<strong>https</strong>），原协议不再使用（这种情况很少）。</p>
</li>
<li><p>主域名不含<strong>www</strong>（<a href="https://example.com/）。" target="_blank" rel="noopener">https://example.com/）。</a></p>
</li>
</ul>
<figure class="image-box">
                <img src="{15276BFE-0F71-4575-B845-ADA546AE9EF8}_20190622145217.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<h3 id="使用302重定向"><a href="#使用302重定向" class="headerlink" title="使用302重定向"></a>使用<strong>302</strong>重定向</h3><ul>
<li>站点升级了协议（由<strong>http</strong>升级到<strong>https</strong>），原协议依旧使用。</li>
</ul>
<figure class="image-box">
                <img src="{0E158DC9-DE68-47EC-9C22-C94E84603E9B}_20190622145046.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<p>（<strong>307</strong>与<strong>302</strong>类似，都表示临时重定向，只不过<strong>307</strong>为<strong>GET</strong>请求方式重定向。）</p>
<ul>
<li>网站切换语言。比如访问<strong><a href="https://www.microsoft.com/" target="_blank" rel="noopener">https://www.microsoft.com/</a></strong>（微软的英文官网）这个域名，服务器判断用户当前处于中国大陆地区，直接重定向到<strong><a href="https://www.microsoft.com/zh-cn" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn</a></strong>（微软的简体中文官网），此时使用<strong>302</strong>进行重定向。类似的还有根据用户的设备重定向到 PC 端页面或者移动端页面。</li>
</ul>
<figure class="image-box">
                <img src="{73F1359C-FC27-449D-AB68-C2850DF21022}_20190622150910.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<ul>
<li>用户登录信息过期，自动跳转到登陆界面。</li>
</ul>
<figure class="image-box">
                <img src="2FEWDIpq0trZFeziy9YSF.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>综上所述，只要原有地址的资源今后不再使用一般用<strong>301</strong>进行重定向，只要是临时性重定向一般用<strong>302</strong>进行重定向。</p>
]]></content>
      
        <categories>
            
            <category> HTTP </category>
            
            <category> 重定向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> URL </tag>
            
            <tag> 重定向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原生JS实现图片懒加载]]></title>
      <url>/2016/08/06/201608060654/</url>
      <content type="html"><![CDATA[<h2 id="图片懒加载介绍"><a href="#图片懒加载介绍" class="headerlink" title="图片懒加载介绍"></a>图片懒加载介绍</h2><p>什么是<strong>懒加载</strong>？懒加载其实就是<strong>按需加载</strong>或者说是<strong>条件加载</strong>，是前端一种优化性能的方式。比如访问一个页面，里面有很多图片（也可以是视频等其他资源）。如果这些图片全部加载出来，不仅要在短时间内发出大量请求而且还要进行渲染，这是很消耗时间的。此外，在渲染过程中会阻塞浏览器继续向下解析，影响用户体验。所以，最佳的模式是访问一个页面的时候当图片出现在可视区域内的时候（或者距离可视区域一定距离的时候）再去加载而不是一开始就加载全部图片。当需要加载的时候再发出图片请求，避免网页初始化时请求拥堵以及过多渲染阻塞线程。</p>
<h2 id="图片懒加载原理"><a href="#图片懒加载原理" class="headerlink" title="图片懒加载原理"></a>图片懒加载原理</h2><p><strong>img</strong>标签有一个属性是<strong>src</strong>，用来表示图片的地址，当这个属性的值不为空时，浏览器就会根据这个属性值发出请求；如果这个属性值为空，则不会发出请求。根据这个原理，将图片地址赋值给<strong>img</strong>标签的<strong>data-src</strong>属性，而<strong>src</strong>属性值设为空或者设为一个默认图片的路径。</p>
<p>获取<strong>img</strong>标签到浏览器顶部的距离，当这个距离等于某个值或在某个范围内时（开发者自己决定，一般以浏览器窗口的可视区域高度为参考标准。），将<strong>data-src</strong>的属性值赋值给<strong>src</strong>属性。</p>
<h2 id="图片懒加载实现"><a href="#图片懒加载实现" class="headerlink" title="图片懒加载实现"></a>图片懒加载实现</h2><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片懒加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      li &#123;</span><br><span class="line">        width: 50%;</span><br><span class="line">        height: 500px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"1.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"2.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"3.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"4.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"5.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"6.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"7.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"8.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"9.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgArr = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="javascript">    imgArr = <span class="built_in">Array</span>.from(imgArr) <span class="comment">// 将类数组对象转化为数组</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> imgLazyload = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> lazyDistance = <span class="number">20</span> <span class="comment">// 图片提前加载的距离</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; imgArr.length; index++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> imgDOM = imgArr[index]</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取图片上边框到浏览器可视区域顶部的距离</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> imgDOMtop = imgDOM.getBoundingClientRect().top</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取浏览器可视区域的高度</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> clientHeight =</span></span><br><span class="line"><span class="javascript">          <span class="built_in">document</span>.documentElement.clientHeight || <span class="built_in">window</span>.innerHeight</span></span><br><span class="line"></span><br><span class="line">        if (imgDOMtop - clientHeight &lt;= lazyDistance) &#123;</span><br><span class="line">          imgDOM.src = imgDOM.dataset.src</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 已经加载的图片从数组中移除从而避免重复操作</span></span></span><br><span class="line">          imgArr.splice(index, 1)</span><br><span class="line"></span><br><span class="line">          /* </span><br><span class="line">            数组中移除一个元素后，被移除元素后面的元素向前移动一位。</span><br><span class="line">            如果“index”不减少一个单位，则会跳过原本在被移除元素后面的那个元素。</span><br><span class="line">             */</span><br><span class="line">          index -= 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当页面滚动的时候触发图片懒加载逻辑</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, () =&gt; &#123;</span></span><br><span class="line">      imgLazyload()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 页面加载完成后首屏加载一次</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span></span><br><span class="line">      imgLazyload()</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（以上代码粘贴到 html 文件中即可运行体验效果）</p>
<h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><p>上述方法是通过绑定“<strong>scroll</strong>”事件实现的，当页面滚动时，判断被观察元素上边框与视口顶部的距离从而判断被观察元素是否在视口内。但是<strong>scroll</strong>事件触发过于频繁，很影响页面的流畅性，甚至会出现卡顿现象。幸运的是，有一个新的接口<strong>IntersectionObserver</strong>，既可以观察元素是否在视口内又完美地解决了上述问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(callback, option)</span><br><span class="line"></span><br><span class="line">observer.observe(<span class="built_in">document</span>.querySelector(<span class="string">'#domId'</span>))</span><br><span class="line">observer.unobserve(<span class="built_in">document</span>.querySelector(<span class="string">'#domId'</span>))</span><br><span class="line">observer.disconnect()</span><br></pre></td></tr></table></figure>

<p><strong>IntersectionObserver</strong>是浏览器提供的原生构造函数，接受两个参数，第一个参数是回调函数，另外一个是可选配置参数。该构造函数的返回值是一个观察器实例。<strong>observe</strong>用来指定被观察的元素，如果要观察多个元素，需要多次调用这个方法。只要被观察元素的可见性发生变化，就会执行观察器的回调函数（回调函数会在被观察元素刚刚进入视口或者<strong>完全</strong>离开视口时触发）。<strong>unobserve</strong>用来取消对元素的观察，用法与<strong>observe</strong>相同。<strong>disconnect</strong>用来关闭观察器。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片懒加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      li img &#123;</span><br><span class="line">        width: 50%;</span><br><span class="line">        height: 200px;</span><br><span class="line">        margin-bottom: 2000px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"1.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"2.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"3.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"4.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"5.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"6.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"7.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"8.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">data-src</span>=<span class="string">"9.jpg"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgArr = <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="javascript">    imgArr = <span class="built_in">Array</span>.from(imgArr) <span class="comment">// 将类数组对象转化为数组</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 初始化一个实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">changes</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// changes是一个数组，被观察元素的可见性若是发生变化，该元素的信息就会存入数组中。</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; changes.length; index++) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">const</span> changer = changes[index]</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.time); // 被观察元素可见性发生变化时的时间，是一个以毫秒为单位的时间戳。</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.target); // 可见性发生变化的目标元素</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.rootBounds); // 根元素矩形区域的信息，默认根元素是浏览器视口。</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.boundingClientRect); // 目标元素矩形区域的信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.intersectionRect); // 目标元素与根元素（默认根元素是浏览器视口）交叉区域的信息</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">// console.log(changer.intersectionRatio); // 目标元素的可见比例，即intersectionRect占boundingClientRect的比例。</span></span></span><br><span class="line"></span><br><span class="line">        if (changer.intersectionRatio &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> targetDOM = changer.target</span></span><br><span class="line"></span><br><span class="line">          targetDOM.src = targetDOM.dataset.src</span><br><span class="line"></span><br><span class="line"><span class="actionscript">          <span class="comment">// 对已经出现在视口的元素取消观察</span></span></span><br><span class="line">          observer.unobserve(targetDOM)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; imgArr.length; index++) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">const</span> imgDOM = imgArr[index]</span></span><br><span class="line"></span><br><span class="line">      observer.observe(imgDOM)</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（以上代码粘贴到 html 文件中即可运行体验效果）</p>
<p><strong>IntersectionObserver</strong>的第二个参数是一个配置对象。其可以有以下属性：</p>
<ul>
<li><p><strong>threshold</strong>：默认值为<code>[0]</code>，表示<strong>intersectionRatio == 0</strong>时回调函数会被触发。当然，开发人员也可以设置为<code>[0, 0.5, 1]</code>，表示<strong>intersectionRatio</strong>等于 0、0.5、1 时回调函数会被触发。</p>
</li>
<li><p><strong>root</strong>：默认情况下，被观察元素的可见性变化是相对于浏览器视口的，既以浏览器视口为参考系的。该属性的作用就是修改被观察元素的参考视口。</p>
</li>
<li><p><strong>rootMargin</strong>：这个属性用来给<strong>root</strong>元素设置<strong>margin</strong>值，使用方法与<strong>CSS</strong>中的<strong>margin</strong>属性一样。运行上面的两个案例会发现，在第一个案例中，图片标签将要出现在视口内时就开始加载图片，另一个案例恰恰相反，图片标签出现在视口后才开始加载图片（被观察元素只有与<strong>root</strong>元素有交叉（交集）时才会触发回调函数），并未达到预加载效果。给<strong>root</strong>元素设置<strong>rootMargin</strong>属性后，被观察元素只要与<strong>root</strong>元素外边距有交叉（交集）时就会触发回调函数，达到了未进入视口前就开始加载的效果。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(callback, &#123;</span><br><span class="line">  threshold: [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>],</span><br><span class="line">  root: <span class="built_in">document</span>.querySelector(<span class="string">'#domId'</span>),</span><br><span class="line">  rootMargin: <span class="string">'0 0 20px 0'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果被观察元素不是<strong>root</strong>元素的子节点，即使被观察元素出现在浏览器视口内，也不会触发回调函数。</p>
</blockquote>
<p><strong>IntersectionObserver</strong>是一个<strong>异步</strong>接口，其回调函数只有在浏览器线程空闲的时候才会执行，如果浏览器当前的任务队列中有待处理的任务，其回调函数是不会被执行的。</p>
<p>参考链接：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect</a></p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 懒加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常见“同源策略”问题解决方案]]></title>
      <url>/2016/08/02/201608020650/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>“同源政策”（same-origin policy）是由<strong>Netscape</strong>公司引入浏览器的。其使得浏览器更加安全，现在所有浏览器都支持了这个策略。然而，安全的同时也使得开发过程中出现了一些麻烦。本文列出了一些常见的同源策略问题以及相对应的解决方案。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>“同源”指的是两个地址之间<strong>协议相同</strong>、<strong>域名相同</strong>、<strong>端口相同</strong>，只要有一个不相同就会出现问题。</p>
<p>目前，受到“同源政策”限制的有以下功能：</p>
<ul>
<li>Cookie、LocalStorage、IndexDB 的读取；</li>
<li>AJAX 请求的响应被浏览器拒绝（浏览器虽然收到了响应，但是并不使用）；</li>
<li>DOM 无法获取（更不用说操作了）。</li>
</ul>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie 是由服务器写入浏览器的，用来控制客户端的状态。虽然受到“同源政策”限制，但是并不苛刻。同源的页面之间可以共享 Cookie，一级域名相同二级域名不同的页面之间也可以通过设置<strong>document.domain</strong>共享 Cookie。</p>
<blockquote>
<p>注意：该方法仅适用于 Cookie、iframe 窗口，LocalStorage、IndexDB 无法使用该方法解决“同源政策”问题。</p>
</blockquote>
<h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p><strong>iframe</strong>标签使得一个页面中可以嵌入另一个页面，如果两个页面不同源，就无法拿到对方的 DOM。这样会造成父子页面无法通信。</p>
<p>对于不同源的父子页面有以下方法解决通信问题：</p>
<ol>
<li>动态 hash</li>
<li>window.name</li>
<li>window.postMessage</li>
</ol>
<h4 id="动态-hash"><a href="#动态-hash" class="headerlink" title="动态 hash"></a>动态 hash</h4><p>在父页面中，通过使用<code>&lt;iframe src=&quot;http://example.com/XXX.html#message&quot;&gt;&lt;/iframe&gt;</code>来嵌入子页面。其中，<strong><a href="http://example.com/XXX.html" target="_blank" rel="noopener">http://example.com/XXX.html</a></strong>为子页面地址，<strong>#</strong>后面的部分称之为<strong>片段标识符（Fragment Identifier）</strong>，片段标识符改变页面不会重新加载，父页面传递给子页面的数据可以放到此部分内。</p>
<p>其过程是父页面动态修改<strong>iframe</strong>标签中<strong>src</strong>属性值的片段标识符部分，子页面通过<code>window.onhashchange</code>事件监听片段标识符部分的变化。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父页面代码</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'iframe'</span>).src = url + <span class="string">'#'</span> + message</span><br><span class="line"><span class="comment">// url为子页面地址</span></span><br><span class="line"><span class="comment">// message变量存放父页面传递给子页面的数据</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子页面代码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="built_in">window</span>.location.hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同理，该方法也可以逆向使用，即实现子页面向父页面传递数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父页面代码</span></span><br><span class="line"><span class="built_in">window</span>.onhashchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> message = <span class="built_in">window</span>.location.hash</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子页面代码</span></span><br><span class="line">parent.location.href = url + <span class="string">'#'</span> + message</span><br><span class="line"><span class="comment">// url为父页面地址</span></span><br><span class="line"><span class="comment">// message变量存放子页面传递给父页面的数据</span></span><br></pre></td></tr></table></figure>

<h4 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h4><p><strong>window.name</strong>是一个特殊的属性。无论页面之间是否同源，只要在同一个窗口内，共享该属性值（前一个页面设置了该属性，后一个页面就可以获取它。）。</p>
<!-- 其过程是父页面打开子页面，子页面将需要传递的数据写入window.name属性内，写入后子页面跳转到一个与父页面同域的页面，此时父页面就可以读取子页面存在window.name内的数据了。操作繁琐且必须一直监听子页面window.name属性值的变化，不建议使用。 -->

<h4 id="window-postMessage"><a href="#window-postMessage" class="headerlink" title="window.postMessage"></a>window.postMessage</h4><p>这是 HTML5 新增加的 API，无论两个窗口是否同源，都可以进行跨窗口通信。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父页面向子页面发送消息</span></span><br><span class="line"><span class="keyword">const</span> popupPage = <span class="built_in">window</span>.open(<span class="string">'http://father.com'</span>)</span><br><span class="line"></span><br><span class="line">popupPage.postMessage(<span class="string">'message'</span>, <span class="string">'http://son.com'</span>)</span><br><span class="line"><span class="comment">// message是向子页面发送的消息 http://son.com是接收消息的子页面</span></span><br><span class="line"><span class="comment">// postMessage第二个参数为*时不限制域名，向所有窗口发送</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子页面向父页面发送消息</span></span><br><span class="line"><span class="built_in">window</span>.opener.postMessage(<span class="string">'message'</span>, <span class="string">'http://father.com'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父页面和子页面都可以使用message事件监听对方的消息</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'message'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.data) <span class="comment">// 接收到的数据内容</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.source) <span class="comment">// 发送消息的页面地址</span></span><br><span class="line">  <span class="built_in">console</span>.log(e.origin) <span class="comment">// 接收消息的页面地址</span></span><br><span class="line"></span><br><span class="line">  e.source.postMessage(<span class="string">'message'</span>, <span class="string">'*'</span>)</span><br><span class="line">  <span class="comment">// 子页面通过e.source属性引用父页面并发送消息</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>因此，通过 window.postMessage 可以间接读写其他页面的 LocalStorage、IndexDB。</strong></p>
<p>参考链接：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage</a></p>
<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><p>由于同源政策的影响，AJAX 请求只能发给同源的网址，否则报错。解决方法有 JSONP、iframe、postMessage、window.name、代理服务器、CORS、WebSocket。</p>
<h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>该方法是浏览器与服务器跨源通信的常用方法，对于前端简单且兼容性好，对于后端服务器变动小。其原理是<strong>script</strong>、<strong>img</strong>等标签中的<strong>src</strong>属性请求非同源链接不受同源策略影响。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getData = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态添加script标签</span></span><br><span class="line"><span class="comment">// 向跨源网址发出请求</span></span><br><span class="line"><span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">script.setAttribute(<span class="string">'type'</span>, <span class="string">'text/javascript'</span>)</span><br><span class="line">script.src = <span class="string">'http://example.com/?callback=getData'</span></span><br><span class="line"><span class="comment">// callback参数用来指定回调函数的名字 服务器收到这个请求以后将数据放在回调函数的参数位置后一起返回</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br></pre></td></tr></table></figure>

<h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>CORS 是跨域资源分享（Cross-Origin Resource Sharing）的缩写。它使得浏览器能够向非同源服务器发出 AJAX 请求，解决了 AJAX 请求只能向同源服务器发出请求的限制。</p>
<figure class="image-box">
                <img src="CORS_principle.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<p>1.简单非同源请求：</p>
<p>浏览器如果请求非同源服务器，会自动在请求头中添加<strong>Origin</strong>（绿圈标注部分）字段，用来说明本次请求来自哪个源。服务器会根据这个字段值，决定是否同意这次非同源请求。如果<strong>Origin</strong>指定的源不在许可范围内，服务器会返回一个常规的 HTTP 响应。浏览器检测响应头，发现没有包含<strong>Access-Control-Allow-Origin</strong>（红圈标注部分）字段，此时浏览器会抛出一个错误，请求失败，<strong>此时状态码仍有可能是 200</strong>，响应数据虽然返回给了浏览器，但是被浏览器拦截了，无法在请求回调函数中获取。相反，如果<strong>Origin</strong>指定的源在许可范围内，则响应头中包含<strong>Access-Control-Allow-Origin</strong>字段，可以收到数据。</p>
<ul>
<li><strong>Access-Control-Allow-Origin</strong>：该字段取值要么是请求头中<strong>Origin</strong>字段的值，要么是一个星号（表示允许来自所有域的跨域请求）。</li>
</ul>
<figure class="image-box">
                <img src="simple_req.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<p>2.含有“预检请求”的非同源请求：</p>
<p>这种请求会在正式请求发出之前提前发出一次 HTTP 查询请求（称之为“<strong>预检请求</strong>”）。<strong>预检请求</strong>是浏览器预先询问服务器，当前页面的域名是否在服务器的允许名单之中，以及可以使用哪些 HTTP<strong>请求方法</strong>和<strong>请求头字段</strong>。当提出的要求被服务器完全“同意”后，浏览器才会发出真正的非同源请求，否则无法进行下一步或者报错。</p>
<p>“预检请求”使用的请求方法是<strong>OPTIONS</strong>（紫圈标注部分），用来告诉服务器该请求是“预检请求”，不是真正的请求。此外，”预检请求”的请求头中还包含<strong>Access-Control-Request-Method</strong>、<strong>Access-Control-Request-Headers</strong>（黄圈标注部分）两个特殊字段。</p>
<ul>
<li><strong>Access-Control-Request-Method</strong>：该字段是浏览器用来告诉服务器接下来的正式请求将要使用哪些 HTTP 请求方法。</li>
<li><strong>Access-Control-Request-Headers</strong>：该字段取值是一个逗号分隔的字符串。该字段是浏览器用来告诉服务器接下来的正式请求在请求头中将要附加额外的请求头字段。</li>
</ul>
<p>与此同时，服务器对“预检请求”做出响应，在响应头中包含<strong>Access-Control-Allow-Methods</strong>、<strong>Access-Control-Allow-Headers</strong>（红圈标注部分）等字段。</p>
<ul>
<li><strong>Access-Control-Allow-Methods</strong>：该字段取值是一个逗号分隔的字符串。表明服务器支持的<strong>所有</strong>跨域请求的方法（避免多次“<strong>预检请求</strong>”）。</li>
<li><strong>Access-Control-Allow-Headers</strong>：该字段用来指定接下来的正式请求允许携带的请求头字段。</li>
<li><strong>Access-Control-Max-Age</strong>：该字段用来指定本次<strong>预检请求</strong>的有效期（有效期内不用再发送<strong>预检请求</strong>），单位为秒。</li>
<li><strong>Access-Control-Expose-Headers</strong>：该字段取值是一个逗号分隔的字符串。在跨域请求时，<strong>XMLHttpRequest</strong>对象的<strong>getResponseHeader</strong>方法只能拿到一些最基本的响应头字段（Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma）。如果想拿到其他字段，就必须在<strong>Access-Control-Expose-Headers</strong>里面指定。</li>
</ul>
<figure class="image-box">
                <img src="prelight.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<p>满足以下条件之一的请求在正式请求发出之前会提前发出“预检请求”：</p>
<ul>
<li>一个请求在请求头中包含了任何自定义请求头字段。</li>
<li>使用 HTTP 请求方式是<strong>GET</strong>、<strong>HEAD</strong>、<strong>POST</strong>之外的任何一种方式。</li>
<li>请求方式是<strong>POST</strong>，但请求头的<strong>Content-Type</strong>字段取值是<strong>application/x-www-form-urlencoded</strong>、<strong>multipart/form-data</strong>、<strong>text/plain</strong>之外的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'http://example.com/'</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'PUT'</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.setRequestHeader(<span class="string">'X-Custom-Header'</span>, <span class="string">'value'</span>)</span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure>

<p>上面的<strong>XMLHttpRequest</strong>请求中，请求方法是<strong>PUT</strong>，不是常规请求方式。且在生成的请求头中，有一个用户自定义的字段<strong>X-Custom-Header</strong>，浏览器发现这是个非正常字段自动发出一个”预检请求”，询问服务器是否可以接受这个非正常请求头字段。如果服务器回绝则返回一个正常的响应头，此时浏览器报错；如果同意，则返回的响应头中会有<strong>Access-Control-Allow-Headers: X-Custom-Header</strong>。</p>
<p>3.附带身份凭证的非同源请求：</p>
<p>该请求和前两种请求类似，只不过在发送请求的时候，需要将用户凭证包含在请求中。</p>
<p>默认情况下，Cookie 不会包含在非同源请求之中，开发者需要在非同源请求中把<strong>withCredentials</strong>属性的值设置为<strong>true</strong>，而且服务器响应头中的<strong>Access-Control-Allow-Credentials</strong>字段取值也要设置为<strong>true</strong>，两者缺一不可。只有这样，浏览器才会把响应内容返回给请求的发起者。对于这种请求，响应头中的<strong>Access-Control-Allow-Origin</strong>字段取值不能为星号。这是因为请求头中携带了 Cookie 信息，如果<strong>Access-Control-Allow-Origin</strong>取值为星号请求将会失败，而将<strong>Access-Control-Allow-Origin</strong>字段的值设置为请求发起者所在域名则请求成功执行。此外，这时响应头中也携带了<strong>Set-Cookie</strong>字段。</p>
<figure class="image-box">
                <img src="cred-req.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="string">'http://example.com/'</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"></span><br><span class="line">xhr.open(<span class="string">'GET'</span>, url, <span class="literal">true</span>)</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span></span><br><span class="line"><span class="comment">// XMLHttpRequest的withCredentials设置为true从而向服务器发送Cookie</span></span><br><span class="line">xhr.send()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：有的浏览器不用设置<strong>withCredentials</strong>为<strong>true</strong>也可以向服务器发送 Cookie，可以通过<code>xhr.withCredentials = false;</code>显式关闭。</p>
</blockquote>
<style>
  h4 {
    font-size: 14px !important;
  }
</style>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> HTTP </category>
            
            <category> 跨域 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出HTTP协议（上）]]></title>
      <url>/2016/07/20/201607200640/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>无论大家是前端程序员还是后端程序员，相信大家对<strong>HTTP</strong>这个词一定不陌生，在程序开发中它无处不在。所以，深入了解 HTTP 协议将会提高自己的编程质量以及提高前后端对接的效率。</p>
<h2 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h2><h3 id="HTTP-协议简介"><a href="#HTTP-协议简介" class="headerlink" title="HTTP 协议简介"></a>HTTP 协议简介</h3><p>HTTP 协议是<strong>Hyper Text Transfer Protocol（超文本传输协议）</strong>的缩写，是用于从万维网服务器传输超文本（例如 HTML 文件、图片文件、视频文件等）到本地浏览器的传输协议（<strong>应用层协议</strong>），也是互联网上应用最为广泛的一种网络协议。</p>
<h3 id="HTTP-架构设计"><a href="#HTTP-架构设计" class="headerlink" title="HTTP 架构设计"></a>HTTP 架构设计</h3><p>HTTP 是基于<strong>TCP/IP</strong>通信协议来传递数据，工作于客户端-服务端架构上。浏览器作为 HTTP 客户端通过<strong>URL</strong>向 HTTP 服务端发送请求，服务器收到请求后，向客户端发送响应信息。浏览器通过与服务器建立 TCP 连接，之后发送 HTTP 请求与接收 HTTP 响应都是通过访问 Socket 接口调用 TCP 协议实现。</p>
<figure class="image-box">
                <img src="201811235001.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<blockquote>
<p>注意：在这种架构设计下，如果客户端没有向服务器发起请求，服务器无法主动向客户端推送消息。</p>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>HTTP 使用<strong>统一资源标识符（Uniform Resource Identifiers, URI）</strong>来传输数据和建立连接。一旦建立连接后，数据消息就通过类似 Internet 邮件所使用的格式[RFC5322]和多用途 Internet 邮件扩展（MIME）[RFC2045]来传送。<strong>URL（Uniform Resource Locator）</strong>是一种特殊类型的 URI，包含了用于查找某个资源的足够的信息。URL 中文叫<strong>统一资源定位符</strong>，是互联网上用来标识某一处资源的地址。</p>
<p>以<strong><a href="http://www.munan.wiki:8080/tags/index.html?pageID=5&amp;ID=25618&amp;page=1#title" target="_blank" rel="noopener">http://www.munan.wiki:8080/tags/index.html?pageID=5&amp;ID=25618&amp;page=1#title</a></strong>为例：</p>
<table>
<thead>
<tr>
<th align="center">content</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">http</td>
<td align="center">该部分为协议部分，这代表该 URL 使用的是 HTTP 协议。</td>
</tr>
<tr>
<td align="center"><a href="http://www.munan.wiki" target="_blank" rel="noopener">www.munan.wiki</a></td>
<td align="center">该部分为域名部分。一个 URL 中，也可以使用 IP 地址作为域名。</td>
</tr>
<tr>
<td align="center">8080</td>
<td align="center">该部分为端口部分，域名和端口之间使用“:”作为分隔符。默认不写为 80 端口。</td>
</tr>
<tr>
<td align="center">tags</td>
<td align="center">该部分为虚拟目录部分，从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。</td>
</tr>
<tr>
<td align="center">index.html</td>
<td align="center">该部分为文件名部分，从域名后的最后一个“/”开始到“？”为止，是文件名部分。</td>
</tr>
<tr>
<td align="center">pageID=5&amp;ID=25618&amp;page=1</td>
<td align="center">该部分为参数部分。参数可以有多个，参数之间用“&amp;”作为分隔符。</td>
</tr>
<tr>
<td align="center">title</td>
<td align="center">该部分为锚部分，从“#”开始到最后，都是锚部分。</td>
</tr>
</tbody></table>
<h3 id="HTTP-请求过程"><a href="#HTTP-请求过程" class="headerlink" title="HTTP 请求过程"></a>HTTP 请求过程</h3><p>平日里访问一个网站只需要在浏览器搜索框里输入网址也就是 URL 就可以了，从用户输入 URL 到看到网站内容经历了以下几个步骤：</p>
<figure class="image-box">
                <img src="856284184-5a6abb497fab2_articlex.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<ol>
<li>域名解析：首先会搜索本地 DNS 缓存，如果没有就向 DNS 服务器发起域名解析，以获取该域名所对应的 IP 地址；</li>
<li>建立 TCP 连接：获取域名对应的 IP 后，跟据 IP 地址和端口号与服务器建立 TCP 连接（也就是 TCP 的 3 次握手连接）；</li>
<li>HTTP 请求：TCP 连接成功后，浏览器向服务器发起 HTTP 请求报文（报文内容包含请求行、请求头部、请求主体，该请求报文作为 TCP 三次握手的第三个报文），用来向服务器请求文件；</li>
<li>服务器响应：服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器；</li>
<li>解析代码：浏览器得到响应后，首先解析状态行，查看状态码表明请求是否成功，如果成功读取响应数据并请求 html 文本中引用的图片文件、js 文件、css 文件等；</li>
<li>渲染执行页面：浏览器获取所有资源后，对页面进行渲染执行呈现给用户。</li>
</ol>
<h3 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h3><p>下面是常见的 HTTP 状态码（HTTP Status Code）：</p>
<table>
<thead>
<tr>
<th align="center">code</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>1xx</strong></td>
<td align="center"><strong>信息响应类，服务器收到请求，需要请求者继续执行操作。</strong></td>
</tr>
<tr>
<td align="center">100</td>
<td align="center">（Continue）客户端应继续其请求。</td>
</tr>
<tr>
<td align="center">101</td>
<td align="center">（Switching Protocols）服务器根据客户端的请求切换协议。只能切换到更高级的协议。</td>
</tr>
<tr>
<td align="center"><strong>2xx</strong></td>
<td align="center"><strong>处理成功响应类，操作被成功接收并处理。</strong></td>
</tr>
<tr>
<td align="center">200</td>
<td align="center">（OK）客户端请求成功，一般用于 GET 与 POST 请求。</td>
</tr>
<tr>
<td align="center">201</td>
<td align="center">（Created）成功请求并创建了新的资源。</td>
</tr>
<tr>
<td align="center">202</td>
<td align="center">（Accepted）接受并处理、但处理未完成。</td>
</tr>
<tr>
<td align="center">203</td>
<td align="center">（Non-Authoritative Information）请求成功，但返回的 meta 信息不在原始的服务器，而是一个副本。</td>
</tr>
<tr>
<td align="center">204</td>
<td align="center">（No Content）服务器成功处理，但未返回内容。</td>
</tr>
<tr>
<td align="center">205</td>
<td align="center">（Reset Content）服务器处理成功，用户终端应重置文档视图，可通过此返回码清除浏览器的表单域（重置内容）。</td>
</tr>
<tr>
<td align="center">206</td>
<td align="center">（Partial Content）服务器成功处理了部分 GET 请求。</td>
</tr>
<tr>
<td align="center"><strong>3xx</strong></td>
<td align="center"><strong>重定向响应类，需要进一步的操作以完成请求。</strong></td>
</tr>
<tr>
<td align="center">300</td>
<td align="center">（Multiple Choices）请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端选择。</td>
</tr>
<tr>
<td align="center">301</td>
<td align="center">（Moved Permanently）请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替。</td>
</tr>
<tr>
<td align="center">302</td>
<td align="center">（Found）与 301 类似，但资源只是临时被移动。客户端应继续使用原有 URI。</td>
</tr>
<tr>
<td align="center">303</td>
<td align="center">（See Other）与 301 类似，使用 GET 和 POST 请求查看，建议客户访问其他 URL 或访问方式。</td>
</tr>
<tr>
<td align="center">304</td>
<td align="center">（Not Modified）所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。</td>
</tr>
<tr>
<td align="center">305</td>
<td align="center">（Use Proxy）所请求的资源必须通过代理访问。</td>
</tr>
<tr>
<td align="center">306</td>
<td align="center">（Unused）前一版本 HTTP 中使用的代码，现行版本中不再使用，已经被废弃的 HTTP 状态码。</td>
</tr>
<tr>
<td align="center">307</td>
<td align="center">（Temporary Redirect）临时重定向，与 302 类似，使用 GET 请求重定向。</td>
</tr>
<tr>
<td align="center"><strong>4xx</strong></td>
<td align="center"><strong>客户端错误类，客户请求包含语法错误或者是不能正确执行。</strong></td>
</tr>
<tr>
<td align="center">400</td>
<td align="center">（Bad Request）客户端请求有语法错误，不能被服务器所理解。</td>
</tr>
<tr>
<td align="center">401</td>
<td align="center">（Unauthorized）请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用。</td>
</tr>
<tr>
<td align="center">402</td>
<td align="center">（Payment Required）保留，将来使用。</td>
</tr>
<tr>
<td align="center">403</td>
<td align="center">（Forbidden）服务器理解请求客户端的请求，但是拒绝提供服务。</td>
</tr>
<tr>
<td align="center">404</td>
<td align="center">（Not Found）服务器无法根据客户端的请求找到资源（网页）。</td>
</tr>
<tr>
<td align="center">405</td>
<td align="center">（Method Not Allowed）客户端请求中的方法被禁止。</td>
</tr>
<tr>
<td align="center">406</td>
<td align="center">（Not Acceptable）根据发送的 Accept，请求资源不可访问。</td>
</tr>
<tr>
<td align="center">407</td>
<td align="center">（Proxy Authentication Required）请求要求代理的身份认证，与 401 类似，但请求者应当使用代理服务器进行授权。</td>
</tr>
<tr>
<td align="center">408</td>
<td align="center">（Request Time-out）服务器等待客户端发送的请求时间过长，超时。</td>
</tr>
<tr>
<td align="center">409</td>
<td align="center">（Conflict）服务器完成客户端的 PUT 请求是可能返回此代码，服务器处理请求时发生了冲突。</td>
</tr>
<tr>
<td align="center">410</td>
<td align="center">（Gone）客户端请求的资源已经不存在。410 不同于 404，如果资源以前有现在被永久删除了可使用 410 代码。网站设计人员可通过 301 代码指定资源的新位置。</td>
</tr>
<tr>
<td align="center">411</td>
<td align="center">（Length Required）服务器无法处理客户端发送的不带 Content-Length 的请求信息。</td>
</tr>
<tr>
<td align="center">412（Precondition Failed）</td>
<td align="center">一个或多个请求头字段在当前请求中错误。</td>
</tr>
<tr>
<td align="center">413</td>
<td align="center">（Request Entity Too Large）请求的资源大于服务器允许的大小。由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个 Retry-After 的响应信息。</td>
</tr>
<tr>
<td align="center">414</td>
<td align="center">（Request-URI Too Large）请求的 URI 过长（URI 通常为网址），服务器无法处理。</td>
</tr>
<tr>
<td align="center">415</td>
<td align="center">（Unsupported Media Type）服务器无法处理请求附带的媒体格式，请求资源不支持请求项目格式。</td>
</tr>
<tr>
<td align="center">416</td>
<td align="center">（Requested range not satisfiable）请求中包含 Range 请求头字段，在当前请求资源范围内没有 range 指示值，请求也不包含 If-Range 请求头字段。</td>
</tr>
<tr>
<td align="center">417</td>
<td align="center">（Expectation Failed）服务器不满足请求 Expect 头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求长。</td>
</tr>
<tr>
<td align="center"><strong>5xx</strong></td>
<td align="center"><strong>服务端错误类，服务器在处理请求的过程中发生了错误。</strong></td>
</tr>
<tr>
<td align="center">500</td>
<td align="center">（Internal Server Error）服务器内部错误，无法完成请求。</td>
</tr>
<tr>
<td align="center">501</td>
<td align="center">（Not Implemented）服务器不支持请求的功能，无法完成请求。</td>
</tr>
<tr>
<td align="center">502</td>
<td align="center">（Bad Gateway）作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应。</td>
</tr>
<tr>
<td align="center">503</td>
<td align="center">（Server Unavailable）服务器当前不能处理客户端的请求，一段时间后可能恢复正常。由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的 Retry-After 头信息中。</td>
</tr>
<tr>
<td align="center">504</td>
<td align="center">（Gateway Time-out）充当网关或代理的服务器，未及时从远端服务器获取请求。</td>
</tr>
<tr>
<td align="center">505</td>
<td align="center">（HTTP Version not supported）服务器不支持请求的 HTTP 协议的版本，无法完成处理。</td>
</tr>
</tbody></table>
<h3 id="HTTP-请求报文"><a href="#HTTP-请求报文" class="headerlink" title="HTTP 请求报文"></a>HTTP 请求报文</h3><p>HTTP 请求报文包含请求行、请求头、空行、请求体。</p>
<figure class="image-box">
                <img src="1735907523-5a6abdd41deb8_articlex.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<p>以请求<strong><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></strong>为例（下面为截图）：</p>
<figure class="image-box">
                <img src="8edftuiol10193242.png" alt="" title="" class="">
                <p></p>
            </figure>

<h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>绿色标记部分为请求行，表示请求方式为<strong>GET</strong>请求，使用<strong>HTTP1.1</strong>协议。<strong>GET</strong>是 HTTP 的请求方式之一，HTTP1.1 协议中共定义了 8 种方法与服务器交互，有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT，比较常用的是 GET 和 POST 方法。</p>
<p>GET 请求方法后是 URL（这里是“/”）和请求协议版本 1.1，之间用<strong>空格符</strong>隔开。</p>
<h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>HTTP 的头域包括<strong>通用头</strong>、<strong>请求头</strong>、<strong>响应头</strong>和<strong>实体头</strong>。请求头是请求报文特有的，向服务器提交了一些额外的信息。</p>
<p>以下是常用字段所对应的作用：</p>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Value</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Host</td>
<td align="center"><a href="http://www.github.com" target="_blank" rel="noopener">www.github.com</a></td>
<td align="center">客户端指定自己将访问的服务器域名（或者 IP 地址和端口号）。</td>
</tr>
<tr>
<td align="center">Connection</td>
<td align="center">keep-alive</td>
<td align="center">告诉服务器需要持久有效的连接状态（<strong>HTTP1.1</strong>默认会进行持久连接）。</td>
</tr>
<tr>
<td align="center">Pragma</td>
<td align="center">no-cache</td>
<td align="center">在 HTTP/1.1 协议中，Pragma:no-cache 的含义和 Cache-Control:no-cache 相同。</td>
</tr>
<tr>
<td align="center"><strong>Cache-control</strong></td>
<td align="center">no-cache</td>
<td align="center">浏览器不使用缓存，强制向服务器请求资源。</td>
</tr>
<tr>
<td align="center"><strong>If-Modified-Since</strong></td>
<td align="center">Mon, 10 Apr 2019 22:08:55 GMT</td>
<td align="center">请求的资源在指定日期以后，如果被更新就返回资源，否则返回“Not Modified”。</td>
</tr>
<tr>
<td align="center">Upgrade-Insecure-Requests</td>
<td align="center">1</td>
<td align="center">表示浏览器可以处理 HTTPS 协议，并能把 HTTP 请求自动升级成 HTTPS。</td>
</tr>
<tr>
<td align="center">Referer</td>
<td align="center"><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></td>
<td align="center">浏览器请求发出页面所在地址，<strong>防盗链</strong>作用。</td>
</tr>
<tr>
<td align="center">User-Agent</td>
<td align="center">Mozilla/5.0 (Windows NT 10.0; Win6…</td>
<td align="center">表示用哪种浏览器发出的请求。</td>
</tr>
<tr>
<td align="center">Accept</td>
<td align="center">text/html,application/xhtml+xml…</td>
<td align="center">告诉服务器客户端可接受 MIME 的类型。</td>
</tr>
<tr>
<td align="center">Accept-Encoding</td>
<td align="center">gzip, deflate, br</td>
<td align="center">表示客户端支持压缩内容编码，去掉后会支持任意编码。</td>
</tr>
<tr>
<td align="center">Accept-Lanague</td>
<td align="center">zh-CN,zh;q=0.9,en-US;q=0.8,en;q=0.7</td>
<td align="center">告诉服务器客户端能够接受的语言，没有则代表任何语言。</td>
</tr>
<tr>
<td align="center">Cookies</td>
<td align="center">logged_in=no; _ga=GA1.2…</td>
<td align="center">用于保持会话状态，由服务器端设置，然后在后续请求中，供服务器读取使用。</td>
</tr>
</tbody></table>
<p>以下是详细介绍<strong>Cache-control</strong>不同取值所代表的含义：</p>
<table>
<thead>
<tr>
<th align="center">Value</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">private</td>
<td align="center">默认值。</td>
</tr>
<tr>
<td align="center">max-age=3600</td>
<td align="center">表示浏览器缓存相对于当前时刻 3600s 后过期，在这期间直接使用浏览器缓存。</td>
</tr>
<tr>
<td align="center">max-age=0</td>
<td align="center">表示每次请求都会访问服务器通过<strong>Last-Modified</strong>来判断文件是否被修改。如果被修改，返回状态码 200 并得到最新文件，否则返回状态码 304 并读取缓存文件。</td>
</tr>
<tr>
<td align="center">no-cache</td>
<td align="center">浏览器不使用缓存，强制向服务器请求资源。</td>
</tr>
<tr>
<td align="center">no-store</td>
<td align="center">浏览器不会缓存所有内容。</td>
</tr>
</tbody></table>
<h4 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h4><p>请求头后面的空行是必须的。即使请求体数据为空，也必须有空行。</p>
<h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>这里存放请求时需要传递的数据。</p>
<h4 id="GET-请求与-POST-请求的区别"><a href="#GET-请求与-POST-请求的区别" class="headerlink" title="GET 请求与 POST 请求的区别"></a>GET 请求与 POST 请求的区别</h4><ol>
<li>GET 请求提交的数据会附在 URL 之后（也就是把数据放置在请求头中）以<strong>?</strong>分割 URL，多个参数用<strong>&amp;</strong>连接。如果数据是英文字母或者数字，则原样发送；如果是空格，则转换为<strong>+</strong>；如果是中文或者其他字符，则直接把字符串用 BASE64 加密（如：%E4%BD%A0%E5%A5%BD，％XX 中的 XX 为该符号以 16 进制表示的 ASCII。）。POST 请求提交的数据会放置在请求体中。因此，GET 提交的数据会在地址栏中显示出来。</li>
<li><strong>HTTP 协议</strong>没有对传输的数据大小进行限制，<strong>HTTP 协议规范</strong>也没有对 URL 长度进行限制。但在实际开发中，特定浏览器和服务器对 URL 长度有限制。例如 IE 对 URL 长度的限制是 2083 字节，其他浏览器如 Netscape、FireFox 等，理论上没有长度限制，其限制取决于操作系统的支持。因此对于 GET 提交数据时，传输数据就会受到 URL 长度的限制。POST 请求由于不是通过 URL 传递数据，理论上数据不受限。但实际各种服务器会对 POST 提交的数据进行大小限制。</li>
<li>POST 请求的安全性要比 GET 请求的安全性高。</li>
</ol>
<h3 id="HTTP-响应报文"><a href="#HTTP-响应报文" class="headerlink" title="HTTP 响应报文"></a>HTTP 响应报文</h3><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个 HTTP 的响应消息。HTTP 响应包含状态行、响应头、空行和响应体。</p>
<p>以请求<strong><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></strong>为例（下面为截图）：</p>
<figure class="image-box">
                <img src="ptVFlvOHc1clZ3OCsyU.png" alt="" title="" class="">
                <p></p>
            </figure>

<h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>状态行由 HTTP 协议版本号、状态码、状态消息三部分组成（注意区分请求行）。此例中 HTTP 协议版本为 1.1 版本，状态码为 200，状态消息为 OK。</p>
<h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>以下是常用字段所对应的作用：</p>
<table>
<thead>
<tr>
<th align="center">Key</th>
<th align="center">Value</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Content-Encoding</td>
<td align="center">gzip</td>
<td align="center">文档的编码（Encode）方法。只有在解码之后才可以得到 Content-Type 头指定的内容类型。利用 gzip 压缩文档能够显著地减少 HTML 文档的下载时间。</td>
</tr>
<tr>
<td align="center">Content-Length</td>
<td align="center">数字</td>
<td align="center">表示内容长度。只有<strong>当浏览器使用持久 HTTP 连接时</strong>才需要这个数据。</td>
</tr>
<tr>
<td align="center">Content-Type</td>
<td align="center">text/plain 等</td>
<td align="center">表示文档属于什么 MIME 类型。</td>
</tr>
<tr>
<td align="center">Date</td>
<td align="center">Mon, 10 Jun 2019 14:40:40 GMT</td>
<td align="center">生成响应的日期和时间。</td>
</tr>
<tr>
<td align="center"><strong>Expires</strong></td>
<td align="center">时间点</td>
<td align="center">表示文档什么时候过期，从而不再使用该缓存。</td>
</tr>
<tr>
<td align="center"><strong>Last-Modified</strong></td>
<td align="center">时间点</td>
<td align="center">文档的最后改动时间。浏览器通过<strong>If-Modified-Since</strong>为请求头提供一个日期，该请求将被视为一个条件 GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个 304（Not Modified）状态。</td>
</tr>
<tr>
<td align="center">Server</td>
<td align="center">GitHub.com</td>
<td align="center">服务器名字。</td>
</tr>
<tr>
<td align="center">Set-Cookie</td>
<td align="center">_gh_sess=dm1tSXdxRExvSkpOZ…</td>
<td align="center">设置和页面关联的 Cookie。</td>
</tr>
<tr>
<td align="center">Refresh</td>
<td align="center"></td>
<td align="center">表示浏览器多少时间之后刷新文档，以秒计。</td>
</tr>
<tr>
<td align="center">Location</td>
<td align="center">URL 地址</td>
<td align="center">表示浏览器应当到哪里去提取文档（状态代码为 302）。</td>
</tr>
</tbody></table>
<h4 id="空行-1"><a href="#空行-1" class="headerlink" title="空行"></a>空行</h4><p>响应头后面的空行是必须的。即使响应体数据为空，也必须有空行。</p>
<h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>服务器返回给客户端的数据信息。</p>
<h3 id="非持久连接与持久连接"><a href="#非持久连接与持久连接" class="headerlink" title="非持久连接与持久连接"></a>非持久连接与持久连接</h3><p>在 HTTP 早期版本中，每进行一次通信就要断开一次 TCP 连接，由于当时传输内容较小所以没有什么问题。然而现在不仅请求量较多而且每次请求数据较大（比如图片网站），所以通信一次就断开一次 TCP 连接的模式就不合适了。为了解决这个问题，<strong>HTTP1.1</strong>协议出现了持久连接（HTTP Persistent Connections， HTTP keep-alive， HTTP connection reuse）功能。持久连接的特点是，<strong>只要任意一方没有明确提出断开连接则保持 TCP 连接状态</strong>。在 HTTP1.1 协议中，所有连接默认是持久连接。</p>
<figure class="image-box">
                <img src="persisitConnection.jpg" alt="" title="" class="">
                <p></p>
            </figure>

<p>（图片来自网络）</p>
<p>总之，对于这些请求、响应，如果每次都经过一个单独的 TCP 连接发送则称为非持久连接。反之，如果每次都经过相同的 TCP 连接进行发送，则称为持久连接。非持久连接在每次请求、响应之后都要断开连接，下次再建立新的 TCP 连接。</p>
<style>
  h4 {
    font-size: 14px !important;
  }
</style>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> Node </category>
            
            <category> 爬虫 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> Node </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端适配（下）]]></title>
      <url>/2016/07/06/201607060840/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>承接<a href="/2019/01/10/201901101503/" title="移动端适配（上）">移动端适配（上）</a>，这次主要写<strong>“viewport”缩放</strong>适配方式。这是淘宝使用的方法，实现原理是将页面放大 dpr（devicePixelRatio）倍，然后 viewport 设置为 1/dpr。例如 iphone6/7/8 的 dpr 为 2，则页面整体放大 2 倍，1px(css 单位)在 iphone6/7/8 下默认显示为 2px(物理像素)。将 viewport 设置为 1/2，这样页面整体缩回原始大小。这样页面显示时的宽度就会等于设备逻辑像素大小（device-width）。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="物理像素"><a href="#物理像素" class="headerlink" title="物理像素"></a>物理像素</h3><p>物理像素（physical pixel）既设备像素，用于表示显示屏中一个最微小的方格。每个方格由操作系统控制颜色和亮度。方格越微小，画面越细腻。</p>
<h3 id="逻辑像素"><a href="#逻辑像素" class="headerlink" title="逻辑像素"></a>逻辑像素</h3><p>逻辑像素也称为设备独立像素（density-independent pixel）或者虚拟像素，独立于设备用于逻辑上衡量像素的单位。</p>
<h3 id="设备像素比"><a href="#设备像素比" class="headerlink" title="设备像素比"></a>设备像素比</h3><p>设备像素比（device pixel ratio）简称为<strong>dpr</strong>，其大小是物理像素与逻辑像素的比值。执行代码<code>window.devicePixelRatio</code>可获取到当前设备的<strong>dpr</strong>。</p>
<figure class="image-box">
                <img src="multidevice.png" alt="" title="" class="">
                <p></p>
            </figure>

<p>（以苹果设备为例，绿、红、黄各部分分别表示各设备的物理像素、逻辑像素、设备像素比。图片来自<a href="https://www.paintcodeapp.com/news/ultimate-guide-to-iphone-resolutions/" target="_blank" rel="noopener" title="PaintCode">PaintCode</a>。）</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>以<strong>iPhone6</strong>为例，其物理像素、逻辑像素、设备像素比分别为 750×1334、375×667、2。这也造成了<strong>1px</strong>的边框在 iPhone6 上显示为<strong>2px</strong>的宽度。以下为解决方法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr等于1时使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr等于2时使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"initial-scale=0.333333, maximum-scale=0.333333, minimum-scale=0.333333, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr等于3时使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">"initial-scale=0.25, maximum-scale=0.25, minimum-scale=0.25, user-scalable=no"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- dpr等于4时使用 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>其思想是根据设备的<strong>dpr</strong>值相应改变<code>&lt;meta&gt;</code>标签中<strong>viewport</strong>的值（当然你也可以通过脚本动态生成该标签）。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> viewport </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[深入浅出meta标签]]></title>
      <url>/2016/07/02/201607020832/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>meta 标签提供关于 html 文档的元数据（元数据不会显示在网页上，但是对于机器是可读的。），常用来描述一个 html 网页的属性（例如作者、网页描述、关键词等。）或者渲染方式等。meta 标签有两个属性，分别是<strong>http-equiv</strong>属性和<strong>name</strong>属性，不同的属性又有不同的属性值，这些不同的属性值就实现了网页不同的功能。</p>
<p>name 属性主要用于描述网页，与之对应的属性值为 content，content 中的内容主要是便于搜索引擎查找信息和分类信息用的。</p>
<p><strong>格式为：</strong><code>&lt;meta name=&quot;属性名&quot;content=&quot;属性值&quot; /&gt;</code>。</p>
<p>http-equiv（http-equivalent）属性相当于<strong>http</strong>的文件头作用，它可以向浏览器传回一些有用的信息，以帮助精确地显示网页内容，与之对应的属性值同样为 content。</p>
<p><strong>格式为：</strong><code>&lt;meta http-equiv=&quot;属性名&quot;content=&quot;属性值&quot; /&gt;</code>。</p>
<p>（以下按照 meta 标签功能进行分类解释。）</p>
<h2 id="搜索引擎优化（SEO）"><a href="#搜索引擎优化（SEO）" class="headerlink" title="搜索引擎优化（SEO）"></a>搜索引擎优化（SEO）</h2><h3 id="keywords（关键词）"><a href="#keywords（关键词）" class="headerlink" title="keywords（关键词）"></a>keywords（关键词）</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;keywords&quot; content=&quot;关键词1, 关键词2, 关键词3, ...&quot; /&gt;</code>。</p>
<p>说明：keywords 用来告诉搜索引擎网页的关键词是什么，为搜索引擎提供关键词列表，各关键词间用英文逗号隔开。每个网页应具有描述该网页内容的一组唯一的关键词，这样用户可以通过关键词搜索你的网站。</p>
<h3 id="description（网页描述）"><a href="#description（网页描述）" class="headerlink" title="description（网页描述）"></a>description（网页描述）</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;description&quot; content=&quot;这里是网页描述，不超过150个字符&quot; /&gt;</code>。</p>
<p>说明：description 用来告诉搜索引擎网页的主要内容是什么，每个网页都应有一个不超过 150 个字符且能准确反映网页内容的描述标签。</p>
<h3 id="robots（搜索引擎抓取）"><a href="#robots（搜索引擎抓取）" class="headerlink" title="robots（搜索引擎抓取）"></a>robots（搜索引擎抓取）</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;robots&quot; content=&quot;index, follow&quot; /&gt;</code>。</p>
<p>说明：robots 用来告诉爬虫哪些网页需要索引，哪些网页不需要索引。content 的值有 all、none、index、noindex、follow、nofollow，默认是 all。</p>
<table>
<thead>
<tr>
<th align="center">content</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">all</td>
<td align="center">文件将被检索，且网页上的链接可以被查询。</td>
</tr>
<tr>
<td align="center">none</td>
<td align="center">文件将不被检索，且网页上的链接不可以被查询。</td>
</tr>
<tr>
<td align="center">index</td>
<td align="center">文件将被检索。</td>
</tr>
<tr>
<td align="center">noindex</td>
<td align="center">文件将不被检索，但网页上的链接可以被查询。</td>
</tr>
<tr>
<td align="center">follow</td>
<td align="center">网页上的链接可以被查询。</td>
</tr>
<tr>
<td align="center">nofollow</td>
<td align="center">文件将被检索，但网页上的链接不可以被查询。</td>
</tr>
</tbody></table>
<h3 id="revisit-after"><a href="#revisit-after" class="headerlink" title="revisit-after"></a>revisit-after</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;revisit-after&quot; content=&quot;7 days&quot; /&gt;</code>。</p>
<p>说明：如果页面不是经常更新，为了减轻搜索引擎对服务器带来的压力，可以设置一个搜索引擎的重访时间。</p>
<h2 id="网页解析模式"><a href="#网页解析模式" class="headerlink" title="网页解析模式"></a>网页解析模式</h2><h3 id="charset（字符集）"><a href="#charset（字符集）" class="headerlink" title="charset（字符集）"></a>charset（字符集）</h3><p><strong>示例：</strong><code>&lt;meta charset=&quot;utf-8&quot; /&gt;</code>。</p>
<p>说明：声明网页使用的字符编码。</p>
<table>
<thead>
<tr>
<th align="center">charset</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">utf-8</td>
<td align="center">世界通用的字符编码。</td>
</tr>
<tr>
<td align="center">GB2312</td>
<td align="center">简体中文字符编码。</td>
</tr>
<tr>
<td align="center">BIG5</td>
<td align="center">繁体中文字符编码。</td>
</tr>
<tr>
<td align="center">iso-2022-jp</td>
<td align="center">日文字符编码。</td>
</tr>
<tr>
<td align="center">ks_c_5601</td>
<td align="center">韩文字符编码。</td>
</tr>
<tr>
<td align="center">ISO-8859-1</td>
<td align="center">英文字符编码。</td>
</tr>
</tbody></table>
<h3 id="X-UA-Compatible"><a href="#X-UA-Compatible" class="headerlink" title="X-UA-Compatible"></a>X-UA-Compatible</h3><p><strong>示例：</strong><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge, chrome=1&quot; /&gt;</code>。</p>
<p>说明：这是<strong>IE8</strong>的一个专有 meta 属性，用来兼容其它低版本 IE 浏览器。如果当前 IE 浏览器安装了<strong>Google Chrome Frame</strong>插件，则以<strong>chrome</strong>内核渲染页面，否则就以当前 IE 浏览器支持的最高版本模式来渲染。</p>
<p>遵循&lt;!DOCTYPE&gt;指令文档声明的兼容设置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE7"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在标准模式指令下以IE7标准模式渲染页面，在Quirks混杂模式指令下以IE5模式渲染页面。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在标准模式指令下以IE8标准模式渲染页面，在Quirks混杂模式指令下以IE5模式渲染页面。 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=EmulateIE9"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在标准模式指令下以IE9标准模式渲染页面，在Quirks混杂模式指令下以IE5模式渲染页面。 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>忽略&lt;!DOCTYPE&gt;指令文档声明的兼容设置：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=6"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用IE6标准模式渲染页面 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用IE7标准模式渲染页面 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用IE8标准模式渲染页面 --&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="renderer"><a href="#renderer" class="headerlink" title="renderer"></a>renderer</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit | ie-comp | ie-stand&quot; /&gt;</code>。</p>
<p>说明：renderer 是为双核浏览器（比如 360 浏览器）准备的，用于指定双核浏览器默认以何种方式渲染页面。<strong>webkit | ie-comp | ie-stand</strong>这种写法表示浏览器将会按照从左到右的先后顺序选择其具备的渲染内核来渲染当前网页。</p>
<table>
<thead>
<tr>
<th align="center">content</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">webkit</td>
<td align="center">以 webkit 内核（chrome 内核）渲染页面（360 浏览器的极速模式）。网站打开速度快，可能出现兼容性问题。</td>
</tr>
<tr>
<td align="center">ie-comp</td>
<td align="center">以 IE 兼容模式渲染页面。网站打开速度略低，但网页兼容性问题较少。</td>
</tr>
<tr>
<td align="center">ie-stand</td>
<td align="center">以 IE 标准模式渲染页面。支持硬件加速及 IE9/IE10 全新的脚本渲染引擎。</td>
</tr>
</tbody></table>
<p>国内的主流浏览器基本都是双核（<strong>webkit</strong>和<strong>Trident</strong>）浏览器。基于 webkit 内核常用于网站的高速浏览，基于 IE 内核常用于兼容网银、旧版网站。</p>
<h2 id="http-equiv"><a href="#http-equiv" class="headerlink" title="http-equiv"></a>http-equiv</h2><h3 id="expires（期限）"><a href="#expires（期限）" class="headerlink" title="expires（期限）"></a>expires（期限）</h3><p><strong>示例：</strong><code>&lt;meta http-equiv=&quot;expires&quot; content=&quot;Fri, 12Jan200118:18:18GMT&quot; /&gt;</code>。</p>
<p>说明：expires 用于设定网页的到期时间。一旦网页过期，必须到服务器上重新请求。</p>
<p><strong>注意：</strong>必须使用<strong>GMT</strong>时间格式。</p>
<h3 id="pragma（缓存）"><a href="#pragma（缓存）" class="headerlink" title="pragma（缓存）"></a>pragma（缓存）</h3><p><strong>示例：</strong><code>&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot; /&gt;</code>。</p>
<p>说明：pragma 用于禁止浏览器从本地计算机的缓存中访问页面内容。</p>
<p><strong>注意：</strong>这样设定，用户将无法离线浏览。</p>
<h3 id="refresh"><a href="#refresh" class="headerlink" title="refresh"></a>refresh</h3><p><strong>示例：</strong><code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;5; url=网址&quot; /&gt;</code>。</p>
<p>说明：refresh 用于页面刷新和重定向。</p>
<h3 id="cache-control"><a href="#cache-control" class="headerlink" title="cache-control"></a>cache-control</h3><p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-siteapp"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 禁止百度转码 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置页面不缓存 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：指定请求和响应遵循的缓存机制。</p>
<table>
<thead>
<tr>
<th align="center">http-equiv</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">no-cache</td>
<td align="center">先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。</td>
</tr>
<tr>
<td align="center">no-store</td>
<td align="center">不允许缓存，每次都要去服务器上下载完整的响应（安全措施）。</td>
</tr>
</tbody></table>
<h2 id="webapp"><a href="#webapp" class="headerlink" title="webapp"></a>webapp</h2><h3 id="viewport（视区）"><a href="#viewport（视区）" class="headerlink" title="viewport（视区）"></a>viewport（视区）</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot; /&gt;</code>。</p>
<p>说明：viewport 指的是用户网页的可视区域。这里只作粗略介绍，日后会单独详细介绍。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">width</td>
<td align="center">整数或 device-width（设备的宽度），用于定义 viewport 的像素宽度。</td>
</tr>
<tr>
<td align="center">initial-scale</td>
<td align="center">初始缩放比例，页面第一次加载时的缩放比例。</td>
</tr>
<tr>
<td align="center">maximum-scale</td>
<td align="center">允许用户缩放到的最大比例。</td>
</tr>
<tr>
<td align="center">minimum-scale</td>
<td align="center">允许用户缩放到的最小比例。</td>
</tr>
<tr>
<td align="center">user-scalable</td>
<td align="center">用户是否可以手动缩放。</td>
</tr>
</tbody></table>
<h3 id="apple-mobile-web-app-title"><a href="#apple-mobile-web-app-title" class="headerlink" title="apple-mobile-web-app-title"></a>apple-mobile-web-app-title</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题名&quot; /&gt;</code>。</p>
<p>说明：苹果手机把网页添加到主屏后的标题（iOS6 新增）。</p>
<figure class="image-box">
                <img src="apple-mobile-web-app-title.png" alt="" title="" class="">
                <p></p>
            </figure>

<h3 id="apple-touch-icon"><a href="#apple-touch-icon" class="headerlink" title="apple-touch-icon"></a>apple-touch-icon</h3><p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"touch-icon-iphone.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">sizes</span>=<span class="string">"76×76"</span> <span class="attr">href</span>=<span class="string">"touch-icon-ipad.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"120×120"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"touch-icon-iphone-retina.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"152×152"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"touch-icon-ipad-retina.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以上是针对不同苹果设备选择一个最优图标。 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：苹果手机把网页添加到主屏后的图标（图片自动处理成圆角和高光等效果）。如果更换为<code>apple-touch-icon-precomposed</code>则禁止系统自动添加效果，直接显示设计原图。</p>
<figure class="image-box">
                <img src="apple-mobile-web-app-icon.png" alt="" title="" class="">
                <p></p>
            </figure>

<h3 id="apple-touch-startup-image"><a href="#apple-touch-startup-image" class="headerlink" title="apple-touch-startup-image"></a>apple-touch-startup-image</h3><p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/splash-screen-320x480.png"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPhone/iPod Touch 竖屏 320x480（标准分辨率）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"768x1004"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"/splash-screen-768x1004.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 竖屏 768 x 1004（标准分辨率）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"1536x2008"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"/splash-screen-1536x2008.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 竖屏 1536x2008（Retina）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"1024x748"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"/Default-Portrait-1024x748.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 横屏 1024x748（标准分辨率）--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">  <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">"2048x1496"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"/splash-screen-2048x1496.png"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- iPad 横屏 2048x1496（Retina）--&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：用于设置软件（webApp）启动动画。</p>
<h3 id="apple-mobile-web-app-capable"><a href="#apple-mobile-web-app-capable" class="headerlink" title="apple-mobile-web-app-capable"></a>apple-mobile-web-app-capable</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</code>。</p>
<p>说明：用于启用 webApp 全屏，删除苹果默认的工具栏和菜单栏。</p>
<h3 id="apple-touch-fullscreen"><a href="#apple-touch-fullscreen" class="headerlink" title="apple-touch-fullscreen"></a>apple-touch-fullscreen</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot; /&gt;</code>。</p>
<p>说明：网页添加到主屏幕后全屏显示。</p>
<h3 id="shortcut-icon"><a href="#shortcut-icon" class="headerlink" title="shortcut icon"></a>shortcut icon</h3><p><strong>示例：</strong><code>&lt;link rel=&quot;shortcut icon&quot; type=&quot;image/ico&quot; href=&quot;/favicon.ico&quot; /&gt;</code>。</p>
<p>说明：用于添加 favicon icon。</p>
<h2 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h2><h3 id="theme-color"><a href="#theme-color" class="headerlink" title="theme-color"></a>theme-color</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;theme-color&quot; content=&quot;#db5945&quot; /&gt;</code>。</p>
<p>说明：Chrome39 增加的标签，用来设置选项卡颜色。</p>
<h3 id="google"><a href="#google" class="headerlink" title="google"></a>google</h3><p><strong>示例：</strong><code>&lt;meta name=&quot;google&quot; value=&quot;notranslate&quot; /&gt;</code>。</p>
<p>说明：禁止 Chrome 浏览器中自动提示翻译。</p>
<h3 id="format-detection"><a href="#format-detection" class="headerlink" title="format-detection"></a>format-detection</h3><p><strong>示例：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 忽略将页面中的数字识别为电话号码 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"email=no"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不识别页面中的邮箱 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明：format-detection 是用来检测 html 里的一些特殊内容。</p>
<p>（到此结束，如有问题请留言。）</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> HTML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> meta </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[移动端适配（上）]]></title>
      <url>/2016/06/30/201606300203/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名前端码农（“工程师”这个称号太高大上，我还用不起。）如果不会移动端适配就别说自己是搞前端的。毕竟 PC 独霸天下的时代已经过去了，现在移动端这股浪潮谁也阻止不了。话不多说，下面是我个人总结的一些移动端适配的方法。</p>
<h2 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h2><p>百分比布局是比较早的适配方式，因为<code>CSS2.0</code>时代就已经支持这个方法。其作用可以使页面随着屏幕宽度（或者浏览器宽度）改变而自适应。使用时要注意<code>高度设置百分比时，要求其父类元素有明确高度</code>。</p>
<p><strong>例如：</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">style</span>=<span class="string">"height: 100%;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"height: 100%;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100%; width:100%; bacground-color: #b71c1c;"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- html标签高度等于浏览器当前高度乘100% --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- body标签高度等于html标签前高度乘100% --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- div标签高度等于body标签前高度乘100% --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>rem（root em）是一个新单位其大小等于<code>html标签的字体大小</code>。除了 IE8 及更早版本外所有浏览器均已支持 rem。</p>
<p><strong>例如：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>; <span class="comment">/* 此时1rem等于16px */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此只要让 html 标签字体大小随着屏幕大小改变而改变，那么页面中使用 rem 设置宽高的盒子也会随着屏幕大小改变而改变。<br>常用的的方法有两种。</p>
<h3 id="Media-Queries-法"><a href="#Media-Queries-法" class="headerlink" title="Media Queries 法"></a>Media Queries 法</h3><p>利用媒体查询，根据屏幕大小动态设置 html 标签的字体大小（缺点是只能查询一些常规的屏幕，无法适配所有屏幕。）。</p>
<p><strong>例如：</strong></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">321px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">375px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">376px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">414px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">415px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">639px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">640px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">719px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">720px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">749px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">22.5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">750px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">799px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">23.5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">25px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="脚本动态更新法"><a href="#脚本动态更新法" class="headerlink" title="脚本动态更新法"></a>脚本动态更新法</h3><p>利用 JS，当屏幕大小改变时动态设置 html 标签字体大小。</p>
<p><strong>例如：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">;<span class="function">(<span class="params">(doc, win</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> docElement = doc.documentElement,</span><br><span class="line">    resizeEvent =</span><br><span class="line">      <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">    recalc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> clientWidth = docElement.clientWidth <span class="comment">/* clientWidth为屏幕的宽度 */</span></span><br><span class="line">      <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span></span><br><span class="line">      docElement.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">375</span>) + <span class="string">'px'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  recalc()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span></span><br><span class="line">  win.addEventListener(resizeEvent, recalc, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>

<p>由于提供的设计稿基本都是以 iphone6/7/8（物理像素宽度 750px,逻辑像素宽度 375px,dpr 为 2。）为参考的，所以计算 rem 时除以 375。</p>
<blockquote>
<p>注意：此段代码必须放在 head 标签中，而且必须放在所有 css 代码之前。如果页面一开始渲染没有首先执行此段代码，则后续会按照 html 标签默认字体大小进行渲染。而且在渲染完成后执行此段代码会引起回流，造成页面卡顿闪屏现象。</p>
</blockquote>
<h3 id="lib-flexible"><a href="#lib-flexible" class="headerlink" title="lib-flexible"></a>lib-flexible</h3><p>由于<strong>viewpor</strong>t 单位得到众多浏览器的兼容，<a href="https://github.com/amfe/lib-flexible/" target="_blank" rel="noopener" title="lib-flexible">lib-flexible</a>这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。</p>
<p><strong>源码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">flexible</span>(<span class="params">window, document</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement</span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setBodyFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">      <span class="built_in">document</span>.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">'px'</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, setBodyFontSize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setBodyFontSize()</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span></span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setRemUnit()</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRemUnit)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">      setRemUnit()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeBody = <span class="built_in">document</span>.createElement(<span class="string">'body'</span>)</span><br><span class="line">    <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    testElement.style.border = <span class="string">'.5px solid transparent'</span></span><br><span class="line">    fakeBody.appendChild(testElement)</span><br><span class="line">    docEl.appendChild(fakeBody)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (testElement.offsetHeight === <span class="number">1</span>) &#123;</span><br><span class="line">      docEl.classList.add(<span class="string">'hairlines'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.removeChild(fakeBody)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Flex-Box"><a href="#Flex-Box" class="headerlink" title="Flex Box"></a>Flex Box</h2><p>直接看阮一峰老师的吧：<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener" title="Flex 布局教程：语法篇">Flex 布局教程：语法篇</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener" title="Flex 布局教程：实例篇">Flex 布局教程：实例篇</a><br><a href="http://www.ruanyifeng.com/blog/2018/10/flexbox-form.html" target="_blank" rel="noopener" title="Flexbox 布局的最简单表单">Flexbox 布局的最简单表单</a></p>
<p><a href="/2019/01/22/201901220840/" title="移动端适配（下）">移动端适配（下）</a>。</p>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rem </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习markdown语法]]></title>
      <url>/2016/06/20/201606201932/</url>
      <content type="html"><![CDATA[<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是斜体加粗的文字</em></strong><br><del>这是加删除线的文字</del></p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h2 id="三个或者三个以上的-或者-都可以"><a href="#三个或者三个以上的-或者-都可以" class="headerlink" title="三个或者三个以上的 - 或者 * 都可以"></a>三个或者三个以上的 - 或者 * 都可以</h2><hr>
<hr>
<figure class="image-box">
                <img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=702257389,1274025419&fm=27&gp=0.jpg" alt="666" title="鼠标移动到图片上" class="">
                <p>鼠标移动到图片上</p>
            </figure>

<p><a href="http://jianshu.com" target="_blank" rel="noopener" title="这是超链接title">简书</a>{:target=”_blank”}</p>
<p>无序列表用 - + * 任何一种都可以</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<p>列表嵌套 上一级和下一级之间敲三个空格即可</p>
<ul>
<li>列表内容<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
<tr>
<td>内容</td>
<td align="center">内容</td>
<td align="right">内容</td>
</tr>
</tbody></table>
<p>第二行分割表头和内容 -两边加：表示文字居中 -右边加：表示文字居右<br>| a | b | c |<br>|:——-:|:————- | ———-:|<br>| 居中 | 左对齐 | 右对齐 |<br>|=========|===============|============|</p>
<p><code>单行代码代码内容分别用一个反引号包起来</code><br><code>console.log(&#39;测试&#39;);</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">代码块...</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'测试'</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    num+=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 前端 </category>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你好, 高考!]]></title>
      <url>/2016/06/06/201606060620/</url>
      <content type="html"><![CDATA[<p>是男儿总要走向远方<br>走向远方是为了让生命更辉煌</p>
<p>走在崎岖不平的路上<br>年轻的眼眸里装着梦更装着思想</p>
<p>不论是孤独地走着还是结伴同行<br>让每一个脚印都坚实而有力量</p>
<p>我们学着承受痛苦</p>
<p>学着把眼泪像珍珠一样收藏<br>把眼泪都贮存在成功的那一天流<br>那一天<br>哪怕流它个大海汪洋</p>
<p>我们学着对待误解</p>
<p>学着把生活的苦酒当成饮料一样慢慢品尝<br>不论生命经过多少委屈和艰辛<br>我们总是以一个朝气蓬勃的面孔<br>醒来在每一个早上</p>
<p>我们学着对待流言</p>
<p>学着从容而冷静地面对世事沧桑<br>“猝然临之而不惊<br>无故加之而不怒”<br>这便是我们的大勇<br>我们的修养</p>
<p>我们学着只争朝夕</p>
<p>人生苦短<br>道路漫长<br>我们走向并珍爱每一处风光<br>我们不停地走着<br>不停地走着的我们也成了一处风光</p>
<p>走向远方<br>从少年到青年<br>从青年到老年<br>我们从星星走成了夕阳</p>
<p>我们比任何时候都接近梦想</p>
<p>（以上为汪国真作品《走向远方》）</p>
<style>
  div#post-content p {
    text-align: center;
  }
</style>
]]></content>
      
        <categories>
            
            <category> 隨筆 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 隨筆 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
